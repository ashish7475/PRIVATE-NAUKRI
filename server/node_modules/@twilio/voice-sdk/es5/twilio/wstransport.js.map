{"version":3,"file":"wstransport.js","sourceRoot":"","sources":["../../lib/twilio/wstransport.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module Tools\n * @internalapi\n */\n\nimport { EventEmitter } from 'events';\nimport * as WebSocket from 'ws';\nimport { SignalingErrors } from './errors';\nimport Log from './log';\n\n// tslint:disable-next-line\nconst Backoff = require('backoff');\n\nconst CONNECT_SUCCESS_TIMEOUT = 10000;\nconst CONNECT_TIMEOUT = 5000;\nconst HEARTBEAT_TIMEOUT = 15000;\nconst MAX_PREFERRED_DURATION = 15000;\nconst MAX_PRIMARY_DURATION = Infinity;\nconst MAX_PREFERRED_DELAY = 1000;\nconst MAX_PRIMARY_DELAY = 20000;\n\nexport interface IMessageEvent {\n  data: string;\n  target: WebSocket;\n  type: string;\n}\n\n/**\n * All possible states of WSTransport.\n */\nexport enum WSTransportState {\n  /**\n   * The WebSocket is not open but is trying to connect.\n   */\n  Connecting = 'connecting',\n\n  /**\n   * The WebSocket is not open and is not trying to connect.\n   */\n  Closed = 'closed',\n\n  /**\n   * The underlying WebSocket is open and active.\n   */\n  Open = 'open',\n}\n\n/**\n * Options to be passed to the WSTransport constructor.\n */\nexport interface IWSTransportConstructorOptions {\n  /**\n   * Time in milliseconds before websocket times out when attempting to connect\n   */\n  connectTimeoutMs?: number;\n\n  /**\n   * The maximum delay for the preferred backoff to make a connection attempt.\n   */\n  maxPreferredDelayMs?: number;\n\n  /**\n   * Max duration to attempt connecting to a preferred URI.\n   */\n  maxPreferredDurationMs?: number;\n\n  /**\n   * The maximum delay for the rimary backoff to make a connection attempt.\n   */\n  maxPrimaryDelayMs?: number;\n\n  /**\n   * Max duration to attempt connecting to a preferred URI.\n   */\n  maxPrimaryDurationMs?: number;\n\n  /**\n   * A WebSocket factory to use instead of WebSocket.\n   */\n  WebSocket?: typeof WebSocket;\n}\n\n/**\n * Type of the stored options property internally used by the WSTransport class.\n */\ntype IInternalWSTransportConstructorOptions = Required<IWSTransportConstructorOptions>;\n\n/**\n * WebSocket Transport\n */\nexport default class WSTransport extends EventEmitter {\n  private static defaultConstructorOptions: IInternalWSTransportConstructorOptions = {\n    WebSocket,\n    connectTimeoutMs: CONNECT_TIMEOUT,\n    maxPreferredDelayMs: MAX_PREFERRED_DELAY,\n    maxPreferredDurationMs: MAX_PREFERRED_DURATION,\n    maxPrimaryDelayMs: MAX_PRIMARY_DELAY,\n    maxPrimaryDurationMs: MAX_PRIMARY_DURATION,\n  };\n\n  /**\n   * The current state of the WSTransport.\n   */\n  state: WSTransportState = WSTransportState.Closed;\n\n  /**\n   * The backoff instance used to schedule reconnection attempts.\n   */\n  private readonly _backoff: {\n    preferred: any;\n    primary: any;\n  };\n\n  /**\n   * Start timestamp values for backoffs.\n   */\n  private _backoffStartTime: {\n    preferred: number | null;\n    primary: number | null;\n  } = {\n    preferred: null,\n    primary: null,\n  };\n\n  /**\n   * The URI that the transport is connecting or connected to. The value of this\n   * property is `null` if a connection attempt has not been made yet.\n   */\n  private _connectedUri: string | null = null;\n\n  /**\n   * The current connection timeout. If it times out, we've failed to connect\n   * and should try again.\n   *\n   * We use any here because NodeJS returns a Timer and browser returns a number\n   * and one can't be cast to the other, despite their working interoperably.\n   */\n  private _connectTimeout?: any;\n\n  /**\n   * The current connection timeout. If it times out, we've failed to connect\n   * and should try again.\n   *\n   * We use any here because NodeJS returns a Timer and browser returns a number\n   * and one can't be cast to the other, despite their working interoperably.\n   */\n  private _heartbeatTimeout?: any;\n\n  /**\n   * An instance of Logger to use.\n   */\n  private _log: Log = Log.getInstance();\n\n  /**\n   * Options after missing values are defaulted.\n   */\n  private _options: IInternalWSTransportConstructorOptions;\n\n  /**\n   * Preferred URI endpoint to connect to.\n   */\n  private _preferredUri: string | null;\n\n  /**\n   * Previous state of the connection\n   */\n  private _previousState: WSTransportState;\n\n  /**\n   * Whether we should attempt to fallback if we receive an applicable error\n   * when trying to connect to a signaling endpoint.\n   */\n  private _shouldFallback: boolean = false;\n\n  /**\n   * The currently connecting or open WebSocket.\n   */\n  private _socket?: WebSocket;\n\n  /**\n   * The time the active connection was opened.\n   */\n  private _timeOpened?: number;\n\n  /**\n   * The current uri index that the transport is connected to.\n   */\n  private _uriIndex: number = 0;\n\n  /**\n   * List of URI of the endpoints to connect to.\n   */\n  private _uris: string[];\n\n  /**\n   * @constructor\n   * @param uris - List of URI of the endpoints to connect to.\n   * @param [options] - Constructor options.\n   */\n  constructor(uris: string[], options: IWSTransportConstructorOptions = { }) {\n    super();\n\n    this._options = { ...WSTransport.defaultConstructorOptions, ...options };\n\n    this._uris = uris;\n\n    this._backoff = this._setupBackoffs();\n  }\n\n  /**\n   * Close the WebSocket, and don't try to reconnect.\n   */\n  close(): void {\n    this._log.info('WSTransport.close() called...');\n    this._close();\n  }\n\n  /**\n   * Attempt to open a WebSocket connection.\n   */\n  open(): void {\n    this._log.info('WSTransport.open() called...');\n\n    if (this._socket &&\n        (this._socket.readyState === WebSocket.CONNECTING ||\n        this._socket.readyState === WebSocket.OPEN)) {\n      this._log.info('WebSocket already open.');\n      return;\n    }\n\n    if (this._preferredUri) {\n      this._connect(this._preferredUri);\n    } else {\n      this._connect(this._uris[this._uriIndex]);\n    }\n  }\n\n  /**\n   * Send a message through the WebSocket connection.\n   * @param message - A message to send to the endpoint.\n   * @returns Whether the message was sent.\n   */\n  send(message: string): boolean {\n    // We can't send the message if the WebSocket isn't open\n    if (!this._socket || this._socket.readyState !== WebSocket.OPEN) {\n      return false;\n    }\n\n    try {\n      this._socket.send(message);\n    } catch (e) {\n      // Some unknown error occurred. Reset the socket to get a fresh session.\n      this._log.info('Error while sending message:', e.message);\n      this._closeSocket();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Update the preferred URI to connect to. Useful for Call signaling\n   * reconnection, which requires connecting on the same edge. If `null` is\n   * passed, the preferred URI is unset and the original `uris` array and\n   * `uriIndex` is used to determine the signaling URI to connect to.\n   * @param uri\n   */\n  updatePreferredURI(uri: string | null) {\n    this._preferredUri = uri;\n  }\n\n  /**\n   * Update acceptable URIs to reconnect to. Resets the URI index to 0.\n   */\n  updateURIs(uris: string[] | string) {\n    if (typeof uris === 'string') {\n      uris = [uris];\n    }\n\n    this._uris = uris;\n    this._uriIndex = 0;\n  }\n\n  /**\n   * Close the WebSocket, and don't try to reconnect.\n   */\n  private _close(): void {\n    this._setState(WSTransportState.Closed);\n    this._closeSocket();\n  }\n\n  /**\n   * Close the WebSocket and remove all event listeners.\n   */\n  private _closeSocket(): void {\n    clearTimeout(this._connectTimeout);\n    clearTimeout(this._heartbeatTimeout);\n\n    this._log.info('Closing and cleaning up WebSocket...');\n\n    if (!this._socket) {\n      this._log.info('No WebSocket to clean up.');\n      return;\n    }\n\n    this._socket.removeEventListener('close', this._onSocketClose as any);\n    this._socket.removeEventListener('error', this._onSocketError as any);\n    this._socket.removeEventListener('message', this._onSocketMessage as any);\n    this._socket.removeEventListener('open', this._onSocketOpen as any);\n\n    if (this._socket.readyState === WebSocket.CONNECTING ||\n        this._socket.readyState === WebSocket.OPEN) {\n      this._socket.close();\n    }\n\n    // Reset backoff counter if connection was open for long enough to be considered successful\n    if (this._timeOpened && Date.now() - this._timeOpened > CONNECT_SUCCESS_TIMEOUT) {\n      this._resetBackoffs();\n    }\n\n    if (this.state !== WSTransportState.Closed) {\n      this._performBackoff();\n    }\n    delete this._socket;\n\n    this.emit('close');\n  }\n\n  /**\n   * Attempt to connect to the endpoint via WebSocket.\n   * @param [uri] - URI string to connect to.\n   * @param [retryCount] - Retry number, if this is a retry. Undefined if\n   *   first attempt, 1+ if a retry.\n   */\n  private _connect(uri: string, retryCount?: number): void {\n    this._log.info(\n      typeof retryCount === 'number'\n        ? `Attempting to reconnect (retry #${retryCount})...`\n        : 'Attempting to connect...',\n    );\n\n    this._closeSocket();\n\n    this._setState(WSTransportState.Connecting);\n    this._connectedUri = uri;\n\n    try {\n      this._socket = new this._options.WebSocket(this._connectedUri);\n    } catch (e) {\n      this._log.info('Could not connect to endpoint:', e.message);\n      this._close();\n      this.emit('error', {\n        code: 31000,\n        message: e.message || `Could not connect to ${this._connectedUri}`,\n        twilioError: new SignalingErrors.ConnectionDisconnected(),\n      });\n      return;\n    }\n\n    this._socket.addEventListener('close', this._onSocketClose as any);\n    this._socket.addEventListener('error', this._onSocketError as any);\n    this._socket.addEventListener('message', this._onSocketMessage as any);\n    this._socket.addEventListener('open', this._onSocketOpen as any);\n\n    delete this._timeOpened;\n\n    this._connectTimeout = setTimeout(() => {\n      this._log.info('WebSocket connection attempt timed out.');\n      this._moveUriIndex();\n      this._closeSocket();\n    }, this._options.connectTimeoutMs);\n  }\n\n  /**\n   * Move the uri index to the next index\n   * If the index is at the end, the index goes back to the first one.\n   */\n  private _moveUriIndex = (): void => {\n    this._uriIndex++;\n    if (this._uriIndex >= this._uris.length) {\n      this._uriIndex = 0;\n    }\n  }\n\n  /**\n   * Called in response to WebSocket#close event.\n   */\n  private _onSocketClose = (event: CloseEvent): void => {\n    this._log.info(`Received websocket close event code: ${event.code}. Reason: ${event.reason}`);\n    // 1006: Abnormal close. When the server is unreacheable\n    // 1015: TLS Handshake error\n    if (event.code === 1006 || event.code === 1015) {\n      this.emit('error', {\n        code: 31005,\n        message: event.reason ||\n          'Websocket connection to Twilio\\'s signaling servers were ' +\n          'unexpectedly ended. If this is happening consistently, there may ' +\n          'be an issue resolving the hostname provided. If a region or an ' +\n          'edge is being specified in Device setup, ensure it is valid.',\n        twilioError: new SignalingErrors.ConnectionError(),\n      });\n\n      const wasConnected = (\n        // Only in Safari and certain Firefox versions, on network interruption, websocket drops right away with 1006\n        // Let's check current state if it's open, meaning we should not fallback\n        // because we're coming from a previously connected session\n        this.state === WSTransportState.Open ||\n\n        // But on other browsers, websocket doesn't drop\n        // but our heartbeat catches it, setting the internal state to \"Connecting\".\n        // With this, we should check the previous state instead.\n        this._previousState === WSTransportState.Open\n      );\n\n      // Only fallback if this is not the first error\n      // and if we were not connected previously\n      if (this._shouldFallback || !wasConnected) {\n        this._moveUriIndex();\n      }\n\n      this._shouldFallback = true;\n    }\n    this._closeSocket();\n  }\n\n  /**\n   * Called in response to WebSocket#error event.\n   */\n  private _onSocketError = (err: Error): void => {\n    this._log.info(`WebSocket received error: ${err.message}`);\n    this.emit('error', {\n      code: 31000,\n      message: err.message || 'WSTransport socket error',\n      twilioError: new SignalingErrors.ConnectionDisconnected(),\n    });\n  }\n\n  /**\n   * Called in response to WebSocket#message event.\n   */\n  private _onSocketMessage = (message: IMessageEvent): void => {\n    // Clear heartbeat timeout on any incoming message, as they\n    // all indicate an active connection.\n    this._setHeartbeatTimeout();\n\n    // Filter and respond to heartbeats\n    if (this._socket && message.data === '\\n') {\n      this._socket.send('\\n');\n      return;\n    }\n\n    this.emit('message', message);\n  }\n\n  /**\n   * Called in response to WebSocket#open event.\n   */\n  private _onSocketOpen = (): void => {\n    this._log.info('WebSocket opened successfully.');\n    this._timeOpened = Date.now();\n    this._shouldFallback = false;\n    this._setState(WSTransportState.Open);\n    clearTimeout(this._connectTimeout);\n\n    this._resetBackoffs();\n\n    this._setHeartbeatTimeout();\n    this.emit('open');\n  }\n\n  /**\n   * Perform a backoff. If a preferred URI is set (not null), then backoff\n   * using the preferred mechanism. Otherwise, use the primary mechanism.\n   */\n  private _performBackoff(): void {\n    if (this._preferredUri) {\n      this._log.info('Preferred URI set; backing off.');\n      this._backoff.preferred.backoff();\n    } else {\n      this._log.info('Preferred URI not set; backing off.');\n      this._backoff.primary.backoff();\n    }\n  }\n\n  /**\n   * Reset both primary and preferred backoff mechanisms.\n   */\n  private _resetBackoffs() {\n    this._backoff.preferred.reset();\n    this._backoff.primary.reset();\n\n    this._backoffStartTime.preferred = null;\n    this._backoffStartTime.primary = null;\n  }\n\n  /**\n   * Set a timeout to reconnect after HEARTBEAT_TIMEOUT milliseconds\n   *   have passed without receiving a message over the WebSocket.\n   */\n  private _setHeartbeatTimeout(): void {\n    clearTimeout(this._heartbeatTimeout);\n    this._heartbeatTimeout = setTimeout(() => {\n      this._log.info(`No messages received in ${HEARTBEAT_TIMEOUT / 1000} seconds. Reconnecting...`);\n      this._shouldFallback = true;\n      this._closeSocket();\n    }, HEARTBEAT_TIMEOUT);\n  }\n\n  /**\n   * Set the current and previous state\n   */\n  private _setState(state: WSTransportState): void {\n    this._previousState = this.state;\n    this.state = state;\n  }\n\n  /**\n   * Set up the primary and preferred backoff mechanisms.\n   */\n  private _setupBackoffs(): typeof WSTransport.prototype._backoff {\n    const preferredBackoffConfig = {\n      factor: 2.0,\n      maxDelay: this._options.maxPreferredDelayMs,\n      randomisationFactor: 0.40,\n    };\n    this._log.info('Initializing preferred transport backoff using config: ', preferredBackoffConfig);\n    const preferredBackoff = Backoff.exponential(preferredBackoffConfig);\n\n    preferredBackoff.on('backoff', (attempt: number, delay: number) => {\n      if (this.state === WSTransportState.Closed) {\n        this._log.info('Preferred backoff initiated but transport state is closed; not attempting a connection.');\n        return;\n      }\n      this._log.info(`Will attempt to reconnect Websocket to preferred URI in ${delay}ms`);\n      if (attempt === 0) {\n        this._backoffStartTime.preferred = Date.now();\n        this._log.info(`Preferred backoff start; ${this._backoffStartTime.preferred}`);\n      }\n    });\n\n    preferredBackoff.on('ready', (attempt: number, _delay: number) => {\n      if (this.state === WSTransportState.Closed) {\n        this._log.info('Preferred backoff ready but transport state is closed; not attempting a connection.');\n        return;\n      }\n      if (this._backoffStartTime.preferred === null) {\n        this._log.info('Preferred backoff start time invalid; not attempting a connection.');\n        return;\n      }\n      if (Date.now() - this._backoffStartTime.preferred > this._options.maxPreferredDurationMs) {\n        this._log.info('Max preferred backoff attempt time exceeded; falling back to primary backoff.');\n        this._preferredUri = null;\n        this._backoff.primary.backoff();\n        return;\n      }\n      if (typeof this._preferredUri !== 'string') {\n        this._log.info('Preferred URI cleared; falling back to primary backoff.');\n        this._preferredUri = null;\n        this._backoff.primary.backoff();\n        return;\n      }\n      this._connect(this._preferredUri, attempt + 1);\n    });\n\n    const primaryBackoffConfig = {\n      factor: 2.0,\n      // We only want a random initial delay if there are any fallback edges\n      // Initial delay between 1s and 5s both inclusive\n      initialDelay: this._uris && this._uris.length > 1\n        ? Math.floor(Math.random() * (5000 - 1000 + 1)) + 1000\n        : 100,\n      maxDelay: this._options.maxPrimaryDelayMs,\n      randomisationFactor: 0.40,\n    };\n    this._log.info('Initializing primary transport backoff using config: ', primaryBackoffConfig);\n    const primaryBackoff = Backoff.exponential(primaryBackoffConfig);\n\n    primaryBackoff.on('backoff', (attempt: number, delay: number) => {\n      if (this.state === WSTransportState.Closed) {\n        this._log.info('Primary backoff initiated but transport state is closed; not attempting a connection.');\n        return;\n      }\n      this._log.info(`Will attempt to reconnect WebSocket in ${delay}ms`);\n      if (attempt === 0) {\n        this._backoffStartTime.primary = Date.now();\n        this._log.info(`Primary backoff start; ${this._backoffStartTime.primary}`);\n      }\n    });\n\n    primaryBackoff.on('ready', (attempt: number, _delay: number) => {\n      if (this.state === WSTransportState.Closed) {\n        this._log.info('Primary backoff ready but transport state is closed; not attempting a connection.');\n        return;\n      }\n      if (this._backoffStartTime.primary === null) {\n        this._log.info('Primary backoff start time invalid; not attempting a connection.');\n        return;\n      }\n      if (Date.now() - this._backoffStartTime.primary > this._options.maxPrimaryDurationMs) {\n        this._log.info('Max primary backoff attempt time exceeded; not attempting a connection.');\n        return;\n      }\n      this._connect(this._uris[this._uriIndex], attempt + 1);\n    });\n\n    return {\n      preferred: preferredBackoff,\n      primary: primaryBackoff,\n    };\n  }\n\n  /**\n   * The uri the transport is currently connected to\n   */\n  get uri(): string | null {\n    return this._connectedUri;\n  }\n}\n"]}