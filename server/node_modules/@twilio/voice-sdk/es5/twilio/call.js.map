{"version":3,"file":"call.js","sourceRoot":"","sources":["../../lib/twilio/call.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @publicapi\n * @internal\n */\nimport { EventEmitter } from 'events';\nimport Device from './device';\nimport DialtonePlayer from './dialtonePlayer';\nimport {\n  GeneralErrors,\n  InvalidArgumentError,\n  InvalidStateError,\n  MediaErrors,\n  SignalingErrors,\n  TwilioError,\n  UserMediaErrors,\n} from './errors';\nimport Log from './log';\nimport { IceCandidate, RTCIceCandidate } from './rtc/icecandidate';\nimport RTCSample from './rtc/sample';\nimport RTCWarning from './rtc/warning';\nimport StatsMonitor from './statsMonitor';\nimport { isChrome } from './util';\nimport { generateVoiceEventSid } from './uuid';\n\nconst Backoff = require('backoff');\nconst C = require('./constants');\nconst { PeerConnection } = require('./rtc');\nconst { getPreferredCodecInfo } = require('./rtc/sdp');\n\n// Placeholders until we convert the respective files to TypeScript.\n/**\n * @private\n */\nexport type IAudioHelper = any;\n/**\n * @private\n */\nexport type IPStream = any;\n/**\n * @private\n */\nexport type IPeerConnection = any;\n/**\n * @private\n */\nexport type IPublisher = any;\n/**\n * @private\n */\nexport type ISound = any;\n\nconst BACKOFF_CONFIG = {\n  factor: 1.1,\n  initialDelay: 1,\n  maxDelay: 30000,\n  randomisationFactor: 0.5,\n};\n\nconst DTMF_INTER_TONE_GAP: number = 70;\nconst DTMF_PAUSE_DURATION: number = 500;\nconst DTMF_TONE_DURATION: number = 160;\n\nconst METRICS_BATCH_SIZE: number = 10;\nconst METRICS_DELAY: number = 5000;\n\nconst MEDIA_DISCONNECT_ERROR = {\n  disconnect: true,\n  info: {\n    code: 31003,\n    message: 'Connection with Twilio was interrupted.',\n    twilioError: new MediaErrors.ConnectionError(),\n  },\n};\n\nconst MULTIPLE_THRESHOLD_WARNING_NAMES: Record<string, Record<string, string>> = {\n  // The stat `packetsLostFraction` is monitored by two separate thresholds,\n  // `maxAverage` and `max`. Each threshold emits a different warning name.\n  packetsLostFraction: {\n    max: 'packet-loss',\n    maxAverage: 'packets-lost-fraction',\n  },\n};\n\nconst WARNING_NAMES: Record<string, string> = {\n  audioInputLevel: 'audio-input-level',\n  audioOutputLevel: 'audio-output-level',\n  bytesReceived: 'bytes-received',\n  bytesSent: 'bytes-sent',\n  jitter: 'jitter',\n  mos: 'mos',\n  rtt: 'rtt',\n};\n\nconst WARNING_PREFIXES: Record<string, string> = {\n  max: 'high-',\n  maxAverage: 'high-',\n  maxDuration: 'constant-',\n  min: 'low-',\n  minStandardDeviation: 'constant-',\n};\n\n/**\n * A {@link Call} represents a media and signaling connection to a TwiML application.\n * @publicapi\n */\nclass Call extends EventEmitter {\n  /**\n   * String representation of the {@link Call} class.\n   * @private\n   */\n  static toString = () => '[Twilio.Call class]';\n\n  /**\n   * Returns caller verification information about the caller.\n   * If no caller verification information is available this will return null.\n   */\n  readonly callerInfo: Call.CallerInfo | null;\n\n  /**\n   * The custom parameters sent to (outgoing) or received by (incoming) the TwiML app.\n   */\n  readonly customParameters: Map<string, string>;\n\n  /**\n   * Whether this {@link Call} is incoming or outgoing.\n   */\n  get direction(): Call.CallDirection {\n    return this._direction;\n  }\n\n  /**\n   * Audio codec used for this {@link Call}. Expecting {@link Call.Codec} but\n   * will copy whatever we get from RTC stats.\n   */\n  get codec(): string {\n    return this._codec;\n  }\n\n  /**\n   * The temporary CallSid for this call, if it's outbound.\n   */\n  readonly outboundConnectionId?: string;\n\n  /**\n   * Call parameters received from Twilio for an incoming call.\n   */\n  parameters: Record<string, string> = { };\n\n  /**\n   * Audio codec used for this {@link Call}. Expecting {@link Call.Codec} but\n   * will copy whatever we get from RTC stats.\n   */\n  private _codec: string;\n\n  /**\n   * Whether this {@link Call} is incoming or outgoing.\n   */\n  private readonly _direction: Call.CallDirection;\n\n  /**\n   * The number of times input volume has been the same consecutively.\n   */\n  private _inputVolumeStreak: number = 0;\n\n  /**\n   * Whether the call has been answered.\n   */\n  private _isAnswered: boolean = false;\n\n  /**\n   * Whether the call has been cancelled.\n   */\n  private _isCancelled: boolean = false;\n\n  /**\n   * Whether or not the browser uses unified-plan SDP by default.\n   */\n  private readonly _isUnifiedPlanDefault: boolean | undefined;\n\n  /**\n   * The most recent public input volume value. 0 -> 1 representing -100 to -30 dB.\n   */\n  private _latestInputVolume: number = 0;\n\n  /**\n   * The most recent public output volume value. 0 -> 1 representing -100 to -30 dB.\n   */\n  private _latestOutputVolume: number = 0;\n\n  /**\n   * An instance of Logger to use.\n   */\n  private _log: Log = Log.getInstance();\n\n  /**\n   * The MediaHandler (Twilio PeerConnection) this {@link Call} is using for\n   * media signaling.\n   */\n  private _mediaHandler: IPeerConnection;\n\n  /**\n   * An instance of Backoff for media reconnection\n   */\n  private _mediaReconnectBackoff: any;\n\n  /**\n   * Timestamp for the initial media reconnection\n   */\n  private _mediaReconnectStartTime: number;\n\n  /**\n   * State of the {@link Call}'s media.\n   */\n  private _mediaStatus: Call.State = Call.State.Pending;\n\n  /**\n   * A map of messages sent via sendMessage API using voiceEventSid as the key.\n   * The message will be deleted once an 'ack' or an error is received from the server.\n   */\n  private _messages: Map<string, Call.Message> = new Map();\n\n  /**\n   * A batch of metrics samples to send to Insights. Gets cleared after\n   * each send and appended to on each new sample.\n   */\n  private readonly _metricsSamples: Call.CallMetrics[] = [];\n\n  /**\n   * An instance of StatsMonitor.\n   */\n  private readonly _monitor: StatsMonitor;\n\n  /**\n   * Method to be run after {@link Call.ignore} is called.\n   */\n  private _onIgnore: () => void;\n\n  /**\n   * Options passed to this {@link Call}.\n   */\n  private _options: Call.Options = {\n    MediaHandler: PeerConnection,\n    offerSdp: null,\n    shouldPlayDisconnect: () => true,\n    voiceEventSidGenerator: generateVoiceEventSid,\n  };\n\n  /**\n   * The number of times output volume has been the same consecutively.\n   */\n  private _outputVolumeStreak: number = 0;\n\n  /**\n   * The PStream instance to use for Twilio call signaling.\n   */\n  private readonly _pstream: IPStream;\n\n  /**\n   * An instance of EventPublisher.\n   */\n  private readonly _publisher: IPublisher;\n\n  /**\n   * Whether the {@link Call} should send a hangup on disconnect.\n   */\n  private _shouldSendHangup: boolean = true;\n\n  /**\n   * The signaling reconnection token used to re-establish a lost signaling connection.\n   */\n  private _signalingReconnectToken: string | undefined;\n\n  /**\n   * State of the {@link Call}'s signaling.\n   */\n  private _signalingStatus: Call.State = Call.State.Pending;\n\n  /**\n   * A Map of Sounds to play.\n   */\n  private readonly _soundcache: Map<Device.SoundName, ISound> = new Map();\n\n  /**\n   * State of the {@link Call}.\n   */\n  private _status: Call.State = Call.State.Pending;\n\n  /**\n   * Voice event SID generator, creates a unique voice event SID.\n   */\n  private _voiceEventSidGenerator: () => string;\n\n  /**\n   * Whether the {@link Call} has been connected. Used to determine if we are reconnected.\n   */\n  private _wasConnected: boolean = false;\n\n  /**\n   * @constructor\n   * @private\n   * @param config - Mandatory configuration options\n   * @param [options] - Optional settings\n   */\n  constructor(config: Call.Config, options?: Call.Options) {\n    super();\n\n    this._isUnifiedPlanDefault = config.isUnifiedPlanDefault;\n    this._soundcache = config.soundcache;\n\n    if (typeof config.onIgnore === 'function') {\n      this._onIgnore = config.onIgnore;\n    }\n\n    const message = options && options.twimlParams || { };\n    this.customParameters = new Map(\n      Object.entries(message).map(([key, val]: [string, any]): [string, string] => [key, String(val)]));\n\n    Object.assign(this._options, options);\n\n    if (this._options.callParameters) {\n      this.parameters = this._options.callParameters;\n    }\n\n    if (this._options.reconnectToken) {\n      this._signalingReconnectToken = this._options.reconnectToken;\n    }\n\n    this._voiceEventSidGenerator =\n      this._options.voiceEventSidGenerator || generateVoiceEventSid;\n\n    this._direction = this.parameters.CallSid ? Call.CallDirection.Incoming : Call.CallDirection.Outgoing;\n\n    if (this._direction === Call.CallDirection.Incoming && this.parameters) {\n      this.callerInfo = this.parameters.StirStatus\n        ? { isVerified: this.parameters.StirStatus === 'TN-Validation-Passed-A' }\n        : null;\n    } else {\n      this.callerInfo = null;\n    }\n\n    this._mediaReconnectBackoff = Backoff.exponential(BACKOFF_CONFIG);\n    this._mediaReconnectBackoff.on('ready', () => this._mediaHandler.iceRestart());\n\n    // temporary call sid to be used for outgoing calls\n    this.outboundConnectionId = generateTempCallSid();\n\n    const publisher = this._publisher = config.publisher;\n\n    if (this._direction === Call.CallDirection.Incoming) {\n      publisher.info('connection', 'incoming', null, this);\n    } else {\n      publisher.info('connection', 'outgoing', { preflight: this._options.preflight }, this);\n    }\n\n    const monitor = this._monitor = new (this._options.StatsMonitor || StatsMonitor)();\n    monitor.on('sample', this._onRTCSample);\n\n    // First 20 seconds or so are choppy, so let's not bother with these warnings.\n    monitor.disableWarnings();\n    setTimeout(() => monitor.enableWarnings(), METRICS_DELAY);\n\n    monitor.on('warning', (data: RTCWarning, wasCleared?: boolean) => {\n      if (data.name === 'bytesSent' || data.name === 'bytesReceived') {\n        this._onMediaFailure(Call.MediaFailure.LowBytes);\n      }\n      this._reemitWarning(data, wasCleared);\n    });\n    monitor.on('warning-cleared', (data: RTCWarning) => {\n      this._reemitWarningCleared(data);\n    });\n\n    this._mediaHandler = new (this._options.MediaHandler)\n      (config.audioHelper, config.pstream, config.getUserMedia, {\n        codecPreferences: this._options.codecPreferences,\n        dscp: this._options.dscp,\n        forceAggressiveIceNomination: this._options.forceAggressiveIceNomination,\n        isUnifiedPlan: this._isUnifiedPlanDefault,\n        maxAverageBitrate: this._options.maxAverageBitrate,\n        preflight: this._options.preflight,\n      });\n\n    this.on('volume', (inputVolume: number, outputVolume: number): void => {\n      this._inputVolumeStreak = this._checkVolume(\n        inputVolume, this._inputVolumeStreak, this._latestInputVolume, 'input');\n      this._outputVolumeStreak = this._checkVolume(\n        outputVolume, this._outputVolumeStreak, this._latestOutputVolume, 'output');\n      this._latestInputVolume = inputVolume;\n      this._latestOutputVolume = outputVolume;\n    });\n\n    this._mediaHandler.onvolume = (inputVolume: number, outputVolume: number,\n                                   internalInputVolume: number, internalOutputVolume: number) => {\n      // (rrowland) These values mock the 0 -> 32767 format used by legacy getStats. We should look into\n      // migrating to a newer standard, either 0.0 -> linear or -127 to 0 in dB, matching the range\n      // chosen below.\n      monitor.addVolumes((internalInputVolume / 255) * 32767, (internalOutputVolume / 255) * 32767);\n\n      // (rrowland) 0.0 -> 1.0 linear\n      this.emit('volume', inputVolume, outputVolume);\n    };\n\n    this._mediaHandler.ondtlstransportstatechange = (state: string): void => {\n      const level = state === 'failed' ? 'error' : 'debug';\n      this._publisher.post(level, 'dtls-transport-state', state, null, this);\n    };\n\n    this._mediaHandler.onpcconnectionstatechange = (state: string): void => {\n      let level = 'debug';\n      const dtlsTransport = this._mediaHandler.getRTCDtlsTransport();\n\n      if (state === 'failed') {\n        level = dtlsTransport && dtlsTransport.state === 'failed' ? 'error' : 'warning';\n      }\n      this._publisher.post(level, 'pc-connection-state', state, null, this);\n    };\n\n    this._mediaHandler.onicecandidate = (candidate: RTCIceCandidate): void => {\n      const payload = new IceCandidate(candidate).toPayload();\n      this._publisher.debug('ice-candidate', 'ice-candidate', payload, this);\n    };\n\n    this._mediaHandler.onselectedcandidatepairchange = (pair: RTCIceCandidatePair): void => {\n      const localCandidatePayload = new IceCandidate(pair.local).toPayload();\n      const remoteCandidatePayload = new IceCandidate(pair.remote, true).toPayload();\n\n      this._publisher.debug('ice-candidate', 'selected-ice-candidate-pair', {\n        local_candidate: localCandidatePayload,\n        remote_candidate: remoteCandidatePayload,\n      }, this);\n    };\n\n    this._mediaHandler.oniceconnectionstatechange = (state: string): void => {\n      const level = state === 'failed' ? 'error' : 'debug';\n      this._publisher.post(level, 'ice-connection-state', state, null, this);\n    };\n\n    this._mediaHandler.onicegatheringfailure = (type: Call.IceGatheringFailureReason): void => {\n      this._publisher.warn('ice-gathering-state', type, null, this);\n      this._onMediaFailure(Call.MediaFailure.IceGatheringFailed);\n    };\n\n    this._mediaHandler.onicegatheringstatechange = (state: string): void => {\n      this._publisher.debug('ice-gathering-state', state, null, this);\n    };\n\n    this._mediaHandler.onsignalingstatechange = (state: string): void => {\n      this._publisher.debug('signaling-state', state, null, this);\n    };\n\n    this._mediaHandler.ondisconnected = (msg: string): void => {\n      this._log.info(msg);\n      this._publisher.warn('network-quality-warning-raised', 'ice-connectivity-lost', {\n        message: msg,\n      }, this);\n      this.emit('warning', 'ice-connectivity-lost');\n\n      this._onMediaFailure(Call.MediaFailure.ConnectionDisconnected);\n    };\n\n    this._mediaHandler.onfailed = (msg: string): void => {\n      this._onMediaFailure(Call.MediaFailure.ConnectionFailed);\n    };\n\n    this._mediaHandler.onconnected = (): void => {\n      // First time _mediaHandler is connected, but ICE Gathering issued an ICE restart and succeeded.\n      if (this._status === Call.State.Reconnecting) {\n        this._onMediaReconnected();\n      }\n    };\n\n    this._mediaHandler.onreconnected = (msg: string): void => {\n      this._log.info(msg);\n      this._publisher.info('network-quality-warning-cleared', 'ice-connectivity-lost', {\n        message: msg,\n      }, this);\n      this.emit('warning-cleared', 'ice-connectivity-lost');\n      this._onMediaReconnected();\n    };\n\n    this._mediaHandler.onerror = (e: any): void => {\n      if (e.disconnect === true) {\n        this._disconnect(e.info && e.info.message);\n      }\n\n      const error = e.info.twilioError || new GeneralErrors.UnknownError(e.info.message);\n      this._log.error('Received an error from MediaStream:', e);\n      this.emit('error', error);\n    };\n\n    this._mediaHandler.onopen = () => {\n      // NOTE(mroberts): While this may have been happening in previous\n      // versions of Chrome, since Chrome 45 we have seen the\n      // PeerConnection's onsignalingstatechange handler invoked multiple\n      // times in the same signalingState 'stable'. When this happens, we\n      // invoke this onopen function. If we invoke it twice without checking\n      // for _status 'open', we'd accidentally close the PeerConnection.\n      //\n      // See <https://code.google.com/p/webrtc/issues/detail?id=4996>.\n      if (this._status === Call.State.Open || this._status === Call.State.Reconnecting) {\n        return;\n      } else if (this._status === Call.State.Ringing || this._status === Call.State.Connecting) {\n        this.mute(false);\n        this._mediaStatus = Call.State.Open;\n        this._maybeTransitionToOpen();\n      } else {\n        // call was probably canceled sometime before this\n        this._mediaHandler.close();\n      }\n    };\n\n    this._mediaHandler.onclose = () => {\n      this._status = Call.State.Closed;\n      if (this._options.shouldPlayDisconnect && this._options.shouldPlayDisconnect()\n        // Don't play disconnect sound if this was from a cancel event. i.e. the call\n        // was ignored or hung up even before it was answered.\n        && !this._isCancelled) {\n\n        this._soundcache.get(Device.SoundName.Disconnect).play();\n      }\n\n      monitor.disable();\n      this._publishMetrics();\n\n      if (!this._isCancelled) {\n        // tslint:disable no-console\n        this.emit('disconnect', this);\n      }\n    };\n\n    this._pstream = config.pstream;\n    this._pstream.on('ack', this._onAck);\n    this._pstream.on('cancel', this._onCancel);\n    this._pstream.on('error', this._onSignalingError);\n    this._pstream.on('ringing', this._onRinging);\n    this._pstream.on('transportClose', this._onTransportClose);\n    this._pstream.on('connected', this._onConnected);\n    this._pstream.on('message', this._onMessageReceived);\n\n    this.on('error', error => {\n      this._publisher.error('connection', 'error', {\n        code: error.code, message: error.message,\n      }, this);\n\n      if (this._pstream && this._pstream.status === 'disconnected') {\n        this._cleanupEventListeners();\n      }\n    });\n\n    this.on('disconnect', () => {\n      this._cleanupEventListeners();\n    });\n  }\n\n  /**\n   * Set the audio input tracks from a given stream.\n   * @param stream\n   * @private\n   */\n  _setInputTracksFromStream(stream: MediaStream | null): Promise<void> {\n    return this._mediaHandler.setInputTracksFromStream(stream);\n  }\n\n  /**\n   * Set the audio output sink IDs.\n   * @param sinkIds\n   * @private\n   */\n  _setSinkIds(sinkIds: string[]): Promise<void> {\n    return this._mediaHandler._setSinkIds(sinkIds);\n  }\n\n  /**\n   * Accept the incoming {@link Call}.\n   * @param [options]\n   */\n  accept(options?: Call.AcceptOptions): void {\n    if (this._status !== Call.State.Pending) {\n      return;\n    }\n\n    options = options || { };\n    const rtcConfiguration = options.rtcConfiguration || this._options.rtcConfiguration;\n    const rtcConstraints = options.rtcConstraints || this._options.rtcConstraints || { };\n    const audioConstraints = rtcConstraints.audio || { audio: true };\n\n    this._status = Call.State.Connecting;\n\n    const connect = () => {\n      if (this._status !== Call.State.Connecting) {\n        // call must have been canceled\n        this._cleanupEventListeners();\n        this._mediaHandler.close();\n        return;\n      }\n\n      const onAnswer = (pc: RTCPeerConnection, reconnectToken?: string) => {\n        // Report that the call was answered, and directionality\n        const eventName = this._direction === Call.CallDirection.Incoming\n          ? 'accepted-by-local'\n          : 'accepted-by-remote';\n        this._publisher.info('connection', eventName, null, this);\n\n        if (typeof reconnectToken === 'string') {\n          this._signalingReconnectToken = reconnectToken;\n        }\n\n        // Report the preferred codec and params as they appear in the SDP\n        const { codecName, codecParams } = getPreferredCodecInfo(this._mediaHandler.version.getSDP());\n        this._publisher.info('settings', 'codec', {\n          codec_params: codecParams,\n          selected_codec: codecName,\n        }, this);\n\n        // Enable RTC monitoring\n        this._monitor.enable(pc);\n      };\n\n      const sinkIds = typeof this._options.getSinkIds === 'function' && this._options.getSinkIds();\n      if (Array.isArray(sinkIds)) {\n        this._mediaHandler._setSinkIds(sinkIds).catch(() => {\n          // (rrowland) We don't want this to throw to console since the customer\n          // can't control this. This will most commonly be rejected on browsers\n          // that don't support setting sink IDs.\n        });\n      }\n\n      this._pstream.addListener('hangup', this._onHangup);\n\n      if (this._direction === Call.CallDirection.Incoming) {\n        this._isAnswered = true;\n        this._pstream.on('answer', this._onAnswer.bind(this));\n        this._mediaHandler.answerIncomingCall(this.parameters.CallSid, this._options.offerSdp,\n          rtcConstraints, rtcConfiguration, onAnswer);\n      } else {\n        const params = Array.from(this.customParameters.entries()).map(pair =>\n         `${encodeURIComponent(pair[0])}=${encodeURIComponent(pair[1])}`).join('&');\n        this._pstream.on('answer', this._onAnswer.bind(this));\n        this._mediaHandler.makeOutgoingCall(this._pstream.token, params, this.outboundConnectionId,\n          rtcConstraints, rtcConfiguration, onAnswer);\n      }\n    };\n\n    if (this._options.beforeAccept) {\n      this._options.beforeAccept(this);\n    }\n\n    const inputStream = typeof this._options.getInputStream === 'function' && this._options.getInputStream();\n\n    const promise = inputStream\n      ? this._mediaHandler.setInputTracksFromStream(inputStream)\n      : this._mediaHandler.openWithConstraints(audioConstraints);\n\n    promise.then(() => {\n      this._publisher.info('get-user-media', 'succeeded', {\n        data: { audioConstraints },\n      }, this);\n\n      connect();\n    }, (error: Record<string, any>) => {\n      let twilioError;\n\n      if (error.code === 31208\n        || ['PermissionDeniedError', 'NotAllowedError'].indexOf(error.name) !== -1) {\n        twilioError = new UserMediaErrors.PermissionDeniedError();\n        this._publisher.error('get-user-media', 'denied', {\n          data: {\n            audioConstraints,\n            error,\n          },\n        }, this);\n      } else {\n        twilioError = new UserMediaErrors.AcquisitionFailedError();\n\n        this._publisher.error('get-user-media', 'failed', {\n          data: {\n            audioConstraints,\n            error,\n          },\n        }, this);\n      }\n\n      this._disconnect();\n      this.emit('error', twilioError);\n    });\n  }\n\n  /**\n   * Disconnect from the {@link Call}.\n   */\n  disconnect(): void {\n    this._disconnect();\n  }\n\n  /**\n   * Get the local MediaStream, if set.\n   */\n  getLocalStream(): MediaStream | undefined {\n    return this._mediaHandler && this._mediaHandler.stream;\n  }\n\n  /**\n   * Get the remote MediaStream, if set.\n   */\n  getRemoteStream(): MediaStream | undefined {\n    return this._mediaHandler && this._mediaHandler._remoteStream;\n  }\n\n  /**\n   * Ignore the incoming {@link Call}.\n   */\n  ignore(): void {\n    if (this._status !== Call.State.Pending) {\n      return;\n    }\n\n    this._status = Call.State.Closed;\n    this._mediaHandler.ignore(this.parameters.CallSid);\n    this._publisher.info('connection', 'ignored-by-local', null, this);\n\n    if (this._onIgnore) {\n      this._onIgnore();\n    }\n  }\n\n  /**\n   * Check whether call is muted\n   */\n  isMuted(): boolean {\n    return this._mediaHandler.isMuted;\n  }\n\n  /**\n   * Mute incoming audio.\n   * @param shouldMute - Whether the incoming audio should be muted. Defaults to true.\n   */\n  mute(shouldMute: boolean = true): void {\n    const wasMuted = this._mediaHandler.isMuted;\n    this._mediaHandler.mute(shouldMute);\n\n    const isMuted = this._mediaHandler.isMuted;\n    if (wasMuted !== isMuted) {\n      this._publisher.info('connection', isMuted ? 'muted' : 'unmuted', null, this);\n      this.emit('mute', isMuted, this);\n    }\n  }\n\n  /**\n   * Post an event to Endpoint Analytics indicating that the end user\n   *   has given call quality feedback. Called without a score, this\n   *   will report that the customer declined to give feedback.\n   * @param score - The end-user's rating of the call; an\n   *   integer 1 through 5. Or undefined if the user declined to give\n   *   feedback.\n   * @param issue - The primary issue the end user\n   *   experienced on the call. Can be: ['one-way-audio', 'choppy-audio',\n   *   'dropped-call', 'audio-latency', 'noisy-call', 'echo']\n   */\n  postFeedback(score?: Call.FeedbackScore, issue?: Call.FeedbackIssue): Promise<void> {\n    if (typeof score === 'undefined' || score === null) {\n      return this._postFeedbackDeclined();\n    }\n\n    if (!Object.values(Call.FeedbackScore).includes(score)) {\n      throw new InvalidArgumentError(`Feedback score must be one of: ${Object.values(Call.FeedbackScore)}`);\n    }\n\n    if (typeof issue !== 'undefined' && issue !== null && !Object.values(Call.FeedbackIssue).includes(issue)) {\n      throw new InvalidArgumentError(`Feedback issue must be one of: ${Object.values(Call.FeedbackIssue)}`);\n    }\n\n    return this._publisher.info('feedback', 'received', {\n      issue_name: issue,\n      quality_score: score,\n    }, this, true);\n  }\n\n  /**\n   * Reject the incoming {@link Call}.\n   */\n  reject(): void {\n    if (this._status !== Call.State.Pending) {\n      return;\n    }\n\n    this._pstream.reject(this.parameters.CallSid);\n    this._status = Call.State.Closed;\n    this.emit('reject');\n    this._mediaHandler.reject(this.parameters.CallSid);\n    this._publisher.info('connection', 'rejected-by-local', null, this);\n  }\n\n  /**\n   * Send a string of digits.\n   * @param digits\n   */\n  sendDigits(digits: string): void {\n    if (digits.match(/[^0-9*#w]/)) {\n      throw new InvalidArgumentError('Illegal character passed into sendDigits');\n    }\n\n    const sequence: string[] = [];\n    digits.split('').forEach((digit: string) => {\n      let dtmf = (digit !== 'w') ? `dtmf${digit}` : '';\n      if (dtmf === 'dtmf*') { dtmf = 'dtmfs'; }\n      if (dtmf === 'dtmf#') { dtmf = 'dtmfh'; }\n      sequence.push(dtmf);\n    });\n\n    // Binds soundCache to be used in recursion until all digits have been played.\n    (function playNextDigit(soundCache, dialtonePlayer) {\n      const digit: string | undefined = sequence.shift();\n\n      if (digit) {\n        if (dialtonePlayer) {\n          dialtonePlayer.play(digit);\n        } else {\n          soundCache.get(digit as Device.SoundName).play();\n        }\n      }\n\n      if (sequence.length) {\n        setTimeout(playNextDigit.bind(null, soundCache), 200);\n      }\n    })(this._soundcache, this._options.dialtonePlayer);\n\n    const dtmfSender = this._mediaHandler.getOrCreateDTMFSender();\n\n    function insertDTMF(dtmfs: string[]) {\n      if (!dtmfs.length) { return; }\n      const dtmf: string | undefined = dtmfs.shift();\n\n      if (dtmf && dtmf.length) {\n        dtmfSender.insertDTMF(dtmf, DTMF_TONE_DURATION, DTMF_INTER_TONE_GAP);\n      }\n\n      setTimeout(insertDTMF.bind(null, dtmfs), DTMF_PAUSE_DURATION);\n    }\n\n    if (dtmfSender) {\n      if (!('canInsertDTMF' in dtmfSender) || dtmfSender.canInsertDTMF) {\n        this._log.info('Sending digits using RTCDTMFSender');\n        // NOTE(mroberts): We can't just map 'w' to ',' since\n        // RTCDTMFSender's pause duration is 2 s and Twilio's is more\n        // like 500 ms. Instead, we will fudge it with setTimeout.\n        insertDTMF(digits.split('w'));\n        return;\n      }\n\n      this._log.info('RTCDTMFSender cannot insert DTMF');\n    }\n\n    // send pstream message to send DTMF\n    this._log.info('Sending digits over PStream');\n\n    if (this._pstream !== null && this._pstream.status !== 'disconnected') {\n      this._pstream.dtmf(this.parameters.CallSid, digits);\n    } else {\n      const error = new GeneralErrors.ConnectionError('Could not send DTMF: Signaling channel is disconnected');\n      this.emit('error', error);\n    }\n  }\n\n  /**\n   * Send a message to Twilio. Your backend application can listen for these\n   * messages to allow communication between your frontend and backend applications.\n   * <br/><br/>This feature is currently in Beta.\n   * @param message - The message object to send.\n   * @returns A voice event sid that uniquely identifies the message that was sent.\n   */\n  sendMessage(message: Call.Message): string {\n    const { content, contentType, messageType } = message;\n\n    if (typeof content === 'undefined' || content === null) {\n      throw new InvalidArgumentError('`content` is empty');\n    }\n\n    if (typeof messageType !== 'string') {\n      throw new InvalidArgumentError(\n        '`messageType` must be an enumeration value of `Call.MessageType` or ' +\n        'a string.',\n      );\n    }\n\n    if (messageType.length === 0) {\n      throw new InvalidArgumentError(\n        '`messageType` must be a non-empty string.',\n      );\n    }\n\n    if (this._pstream === null) {\n      throw new InvalidStateError(\n        'Could not send CallMessage; Signaling channel is disconnected',\n      );\n    }\n\n    const callSid = this.parameters.CallSid;\n    if (typeof this.parameters.CallSid === 'undefined') {\n      throw new InvalidStateError(\n        'Could not send CallMessage; Call has no CallSid',\n      );\n    }\n\n    const voiceEventSid = this._voiceEventSidGenerator();\n    this._messages.set(voiceEventSid, { content, contentType, messageType, voiceEventSid });\n    this._pstream.sendMessage(callSid, content, contentType, messageType, voiceEventSid);\n    return voiceEventSid;\n  }\n\n  /**\n   * Get the current {@link Call} status.\n   */\n  status(): Call.State {\n    return this._status;\n  }\n\n  /**\n   * String representation of {@link Call} instance.\n   * @private\n   */\n  toString = () => '[Twilio.Call instance]';\n\n  /**\n   * Check the volume passed, emitting a warning if one way audio is detected or cleared.\n   * @param currentVolume - The current volume for this direction\n   * @param streakFieldName - The name of the field on the {@link Call} object that tracks how many times the\n   *   current value has been repeated consecutively.\n   * @param lastValueFieldName - The name of the field on the {@link Call} object that tracks the most recent\n   *   volume for this direction\n   * @param direction - The directionality of this audio track, either 'input' or 'output'\n   * @returns The current streak; how many times in a row the same value has been polled.\n   */\n  private _checkVolume(currentVolume: number, currentStreak: number,\n                       lastValue: number, direction: 'input'|'output'): number {\n    const wasWarningRaised: boolean = currentStreak >= 10;\n    let newStreak: number = 0;\n\n    if (lastValue === currentVolume) {\n      newStreak = currentStreak;\n    }\n\n    if (newStreak >= 10) {\n      this._emitWarning('audio-level-', `constant-audio-${direction}-level`, 10, newStreak, false);\n    } else if (wasWarningRaised) {\n      this._emitWarning('audio-level-', `constant-audio-${direction}-level`, 10, newStreak, true);\n    }\n\n    return newStreak;\n  }\n\n  /**\n   * Clean up event listeners.\n   */\n  private _cleanupEventListeners(): void {\n    const cleanup = () => {\n      if (!this._pstream) { return; }\n\n      this._pstream.removeListener('ack', this._onAck);\n      this._pstream.removeListener('answer', this._onAnswer);\n      this._pstream.removeListener('cancel', this._onCancel);\n      this._pstream.removeListener('error', this._onSignalingError);\n      this._pstream.removeListener('hangup', this._onHangup);\n      this._pstream.removeListener('ringing', this._onRinging);\n      this._pstream.removeListener('transportClose', this._onTransportClose);\n      this._pstream.removeListener('connected', this._onConnected);\n      this._pstream.removeListener('message', this._onMessageReceived);\n    };\n\n    // This is kind of a hack, but it lets us avoid rewriting more code.\n    // Basically, there's a sequencing problem with the way PeerConnection raises\n    // the\n    //\n    //   Cannot establish call. SDK is disconnected\n    //\n    // error in Call#accept. It calls PeerConnection#onerror, which emits\n    // the error event on Call. An error handler on Call then calls\n    // cleanupEventListeners, but then control returns to Call#accept. It's\n    // at this point that we add a listener for the answer event that never gets\n    // removed. setTimeout will allow us to rerun cleanup again, _after_\n    // Call#accept returns.\n    cleanup();\n    setTimeout(cleanup, 0);\n  }\n\n  /**\n   * Create the payload wrapper for a batch of metrics to be sent to Insights.\n   */\n  private _createMetricPayload(): Partial<Record<string, string|boolean>> {\n    const payload: Partial<Record<string, string|boolean>> = {\n      call_sid: this.parameters.CallSid,\n      dscp: !!this._options.dscp,\n      sdk_version: C.RELEASE_VERSION,\n    };\n\n    if (this._options.gateway) {\n      payload.gateway = this._options.gateway;\n    }\n\n    payload.direction = this._direction;\n    return payload;\n  }\n\n  /**\n   * Disconnect the {@link Call}.\n   * @param message - A message explaining why the {@link Call} is being disconnected.\n   * @param wasRemote - Whether the disconnect was triggered locally or remotely.\n   */\n  private _disconnect(message?: string | null, wasRemote?: boolean): void {\n    message = typeof message === 'string' ? message : null;\n\n    if (this._status !== Call.State.Open\n        && this._status !== Call.State.Connecting\n        && this._status !== Call.State.Reconnecting\n        && this._status !== Call.State.Ringing) {\n      return;\n    }\n\n    this._log.info('Disconnecting...');\n\n    // send pstream hangup message\n    if (this._pstream !== null && this._pstream.status !== 'disconnected' && this._shouldSendHangup) {\n      const callsid: string | undefined = this.parameters.CallSid || this.outboundConnectionId;\n      if (callsid) {\n        this._pstream.hangup(callsid, message);\n      }\n    }\n\n    this._cleanupEventListeners();\n    this._mediaHandler.close();\n\n    if (!wasRemote) {\n      this._publisher.info('connection', 'disconnected-by-local', null, this);\n    }\n  }\n\n  private _emitWarning = (groupPrefix: string, warningName: string, threshold: number,\n                          value: number|number[], wasCleared?: boolean, warningData?: RTCWarning): void => {\n    const groupSuffix = wasCleared ? '-cleared' : '-raised';\n    const groupName = `${groupPrefix}warning${groupSuffix}`;\n\n    // Ignore constant input if the Call is muted (Expected)\n    if (warningName === 'constant-audio-input-level' && this.isMuted()) {\n      return;\n    }\n\n    let level = wasCleared ? 'info' : 'warning';\n\n    // Avoid throwing false positives as warnings until we refactor volume metrics\n    if (warningName === 'constant-audio-output-level') {\n      level = 'info';\n    }\n\n    const payloadData: Record<string, any> = { threshold };\n\n    if (value) {\n      if (value instanceof Array) {\n        payloadData.values = value.map((val: any) => {\n          if (typeof val === 'number') {\n            return Math.round(val * 100) / 100;\n          }\n\n          return value;\n        });\n      } else {\n        payloadData.value = value;\n      }\n    }\n\n    this._publisher.post(level, groupName, warningName, { data: payloadData }, this);\n\n    if (warningName !== 'constant-audio-output-level') {\n      const emitName = wasCleared ? 'warning-cleared' : 'warning';\n      this.emit(emitName, warningName, warningData && !wasCleared ? warningData : null);\n    }\n  }\n\n  /**\n   * Transition to {@link CallStatus.Open} if criteria is met.\n   */\n  private _maybeTransitionToOpen(): void {\n    const wasConnected = this._wasConnected;\n    if (this._isAnswered) {\n      this._onSignalingReconnected();\n      this._signalingStatus = Call.State.Open;\n      if (this._mediaHandler && this._mediaHandler.status === 'open') {\n        this._status = Call.State.Open;\n        if (!this._wasConnected) {\n          this._wasConnected = true;\n          this.emit('accept', this);\n        }\n      }\n    }\n  }\n\n  /**\n   * Called when the {@link Call} receives an ack from signaling\n   * @param payload\n   */\n  private _onAck = (payload: Record<string, any>): void => {\n    const { acktype, callsid, voiceeventsid } = payload;\n    if (this.parameters.CallSid !== callsid) {\n      this._log.warn(`Received ack from a different callsid: ${callsid}`);\n      return;\n    }\n    if (acktype === 'message') {\n      this._onMessageSent(voiceeventsid);\n    }\n  }\n\n  /**\n   * Called when the {@link Call} is answered.\n   * @param payload\n   */\n  private _onAnswer = (payload: Record<string, any>): void => {\n    if (typeof payload.reconnect === 'string') {\n      this._signalingReconnectToken = payload.reconnect;\n    }\n\n    // answerOnBridge=false will send a 183 which we need to catch in _onRinging when\n    // the enableRingingState flag is disabled. In that case, we will receive a 200 after\n    // the callee accepts the call firing a second `accept` event if we don't\n    // short circuit here.\n    if (this._isAnswered && this._status !== Call.State.Reconnecting) {\n      return;\n    }\n\n    this._setCallSid(payload);\n    this._isAnswered = true;\n    this._maybeTransitionToOpen();\n  }\n\n  /**\n   * Called when the {@link Call} is cancelled.\n   * @param payload\n   */\n  private _onCancel = (payload: Record<string, any>): void => {\n    // (rrowland) Is this check necessary? Verify, and if so move to pstream / VSP module.\n    const callsid = payload.callsid;\n    if (this.parameters.CallSid === callsid) {\n      this._isCancelled = true;\n      this._publisher.info('connection', 'cancel', null, this);\n      this._cleanupEventListeners();\n      this._mediaHandler.close();\n\n      this._status = Call.State.Closed;\n      this.emit('cancel');\n      this._pstream.removeListener('cancel', this._onCancel);\n    }\n  }\n\n  /**\n   * Called when we receive a connected event from pstream.\n   * Re-emits the event.\n   */\n  private _onConnected = (): void => {\n    this._log.info('Received connected from pstream');\n    if (this._signalingReconnectToken) {\n      this._pstream.reconnect(\n        this._mediaHandler.version.getSDP(),\n        this.parameters.CallSid,\n        this._signalingReconnectToken,\n      );\n    }\n  }\n\n  /**\n   * Called when the {@link Call} is hung up.\n   * @param payload\n   */\n  private _onHangup = (payload: Record<string, any>): void => {\n    if (this.status() === Call.State.Closed) {\n      return;\n    }\n\n    /**\n     *  see if callsid passed in message matches either callsid or outbound id\n     *  call should always have either callsid or outbound id\n     *  if no callsid passed hangup anyways\n     */\n    if (payload.callsid && (this.parameters.CallSid || this.outboundConnectionId)) {\n      if (payload.callsid !== this.parameters.CallSid\n          && payload.callsid !== this.outboundConnectionId) {\n        return;\n      }\n    } else if (payload.callsid) {\n      // hangup is for another call\n      return;\n    }\n\n    this._log.info('Received HANGUP from gateway');\n    if (payload.error) {\n      const error = new GeneralErrors.ConnectionError('Error sent from gateway in HANGUP');\n      this._log.error('Received an error from the gateway:', error);\n      this.emit('error', error);\n    }\n    this._shouldSendHangup = false;\n    this._publisher.info('connection', 'disconnected-by-remote', null, this);\n    this._disconnect(null, true);\n    this._cleanupEventListeners();\n  }\n\n  /**\n   * Called when there is a media failure.\n   * Manages all media-related states and takes action base on the states\n   * @param type - Type of media failure\n   */\n  private _onMediaFailure = (type: Call.MediaFailure): void => {\n    const {\n      ConnectionDisconnected, ConnectionFailed, IceGatheringFailed, LowBytes,\n    } = Call.MediaFailure;\n\n    // These types signifies the end of a single ICE cycle\n    const isEndOfIceCycle = type === ConnectionFailed || type === IceGatheringFailed;\n\n    // All browsers except chrome doesn't update pc.iceConnectionState and pc.connectionState\n    // after issuing an ICE Restart, which we use to determine if ICE Restart is complete.\n    // Since we cannot detect if ICE Restart is complete, we will not retry.\n    if (!isChrome(window, window.navigator) && type === ConnectionFailed) {\n      return this._mediaHandler.onerror(MEDIA_DISCONNECT_ERROR);\n    }\n\n    // Ignore subsequent requests if ice restart is in progress\n    if (this._mediaStatus === Call.State.Reconnecting) {\n\n      // This is a retry. Previous ICE Restart failed\n      if (isEndOfIceCycle) {\n\n        // We already exceeded max retry time.\n        if (Date.now() - this._mediaReconnectStartTime > BACKOFF_CONFIG.maxDelay) {\n          this._log.info('Exceeded max ICE retries');\n          return this._mediaHandler.onerror(MEDIA_DISCONNECT_ERROR);\n        }\n\n        // Issue ICE restart with backoff\n        try {\n          this._mediaReconnectBackoff.backoff();\n        } catch (error) {\n          // Catch and ignore 'Backoff in progress.' errors. If a backoff is\n          // ongoing and we try to start another one, there shouldn't be a\n          // problem.\n          if (!(error.message && error.message === 'Backoff in progress.')) {\n            throw error;\n          }\n        }\n      }\n\n      return;\n    }\n\n    const pc = this._mediaHandler.version.pc;\n    const isIceDisconnected = pc && pc.iceConnectionState === 'disconnected';\n    const hasLowBytesWarning = this._monitor.hasActiveWarning('bytesSent', 'min')\n      || this._monitor.hasActiveWarning('bytesReceived', 'min');\n\n    // Only certain conditions can trigger media reconnection\n    if ((type === LowBytes && isIceDisconnected)\n      || (type === ConnectionDisconnected && hasLowBytesWarning)\n      || isEndOfIceCycle) {\n\n      const mediaReconnectionError = new MediaErrors.ConnectionError('Media connection failed.');\n      this._log.warn('ICE Connection disconnected.');\n      this._publisher.warn('connection', 'error', mediaReconnectionError, this);\n      this._publisher.info('connection', 'reconnecting', null, this);\n\n      this._mediaReconnectStartTime = Date.now();\n      this._status = Call.State.Reconnecting;\n      this._mediaStatus = Call.State.Reconnecting;\n      this._mediaReconnectBackoff.reset();\n      this._mediaReconnectBackoff.backoff();\n\n      this.emit('reconnecting', mediaReconnectionError);\n    }\n  }\n\n  /**\n   * Called when media call is restored\n   */\n  private _onMediaReconnected = (): void => {\n    // Only trigger once.\n    // This can trigger on pc.onIceConnectionChange and pc.onConnectionChange.\n    if (this._mediaStatus !== Call.State.Reconnecting) {\n      return;\n    }\n    this._log.info('ICE Connection reestablished.');\n    this._mediaStatus = Call.State.Open;\n\n    if (this._signalingStatus === Call.State.Open) {\n      this._publisher.info('connection', 'reconnected', null, this);\n      this.emit('reconnected');\n      this._status = Call.State.Open;\n    }\n  }\n\n  /**\n   * Raised when a Call receives a message from the backend.\n   * @param payload - A record representing the payload of the message from the\n   * Twilio backend.\n   */\n  private _onMessageReceived = (payload: Record<string, any>): void => {\n    const { callsid, content, contenttype, messagetype, voiceeventsid } = payload;\n\n    if (this.parameters.CallSid !== callsid) {\n      this._log.warn(`Received a message from a different callsid: ${callsid}`);\n      return;\n    }\n\n    this.emit('messageReceived', {\n      content,\n      contentType: contenttype,\n      messageType: messagetype,\n      voiceEventSid: voiceeventsid,\n    });\n  }\n\n  /**\n   * Raised when a Call receives an 'ack' with an 'acktype' of 'message.\n   * This means that the message sent via sendMessage API has been received by the signaling server.\n   * @param voiceEventSid\n   */\n  private _onMessageSent = (voiceEventSid: string): void => {\n    if (!this._messages.has(voiceEventSid)) {\n      this._log.warn(`Received a messageSent with a voiceEventSid that doesn't exists: ${voiceEventSid}`);\n      return;\n    }\n    const message = this._messages.get(voiceEventSid);\n    this._messages.delete(voiceEventSid);\n    this.emit('messageSent', message);\n  }\n\n  /**\n   * When we get a RINGING signal from PStream, update the {@link Call} status.\n   * @param payload\n   */\n  private _onRinging = (payload: Record<string, any>): void => {\n    this._setCallSid(payload);\n\n    // If we're not in 'connecting' or 'ringing' state, this event was received out of order.\n    if (this._status !== Call.State.Connecting && this._status !== Call.State.Ringing) {\n      return;\n    }\n\n    const hasEarlyMedia = !!payload.sdp;\n    this._status = Call.State.Ringing;\n    this._publisher.info('connection', 'outgoing-ringing', { hasEarlyMedia }, this);\n    this.emit('ringing', hasEarlyMedia);\n  }\n\n  /**\n   * Called each time StatsMonitor emits a sample.\n   * Emits stats event and batches the call stats metrics and sends them to Insights.\n   * @param sample\n   */\n  private _onRTCSample = (sample: RTCSample): void => {\n    const callMetrics: Call.CallMetrics = {\n      ...sample,\n      inputVolume: this._latestInputVolume,\n      outputVolume: this._latestOutputVolume,\n    };\n\n    this._codec = callMetrics.codecName;\n\n    this._metricsSamples.push(callMetrics);\n    if (this._metricsSamples.length >= METRICS_BATCH_SIZE) {\n      this._publishMetrics();\n    }\n\n    this.emit('sample', sample);\n  }\n\n  /**\n   * Called when an 'error' event is received from the signaling stream.\n   */\n  private _onSignalingError = (payload: Record<string, any>): void => {\n    const { callsid, voiceeventsid } = payload;\n    if (this.parameters.CallSid !== callsid) {\n      this._log.warn(`Received an error from a different callsid: ${callsid}`);\n      return;\n    }\n    if (voiceeventsid && this._messages.has(voiceeventsid)) {\n      // Do not emit an error here. Device is handling all signaling related errors.\n      this._messages.delete(voiceeventsid);\n      this._log.warn(`Received an error while sending a message.`, payload);\n    }\n   }\n\n  /**\n   * Called when signaling is restored\n   */\n  private _onSignalingReconnected = (): void => {\n    if (this._signalingStatus !== Call.State.Reconnecting) {\n      return;\n    }\n    this._log.info('Signaling Connection reestablished.');\n\n    this._signalingStatus = Call.State.Open;\n\n    if (this._mediaStatus === Call.State.Open) {\n      this._publisher.info('connection', 'reconnected', null, this);\n      this.emit('reconnected');\n      this._status = Call.State.Open;\n    }\n  }\n\n  /**\n   * Called when we receive a transportClose event from pstream.\n   * Re-emits the event.\n   */\n  private _onTransportClose = (): void => {\n    this._log.error('Received transportClose from pstream');\n    this.emit('transportClose');\n    if (this._signalingReconnectToken) {\n      this._status = Call.State.Reconnecting;\n      this._signalingStatus = Call.State.Reconnecting;\n      this.emit('reconnecting', new SignalingErrors.ConnectionDisconnected());\n    } else {\n      this._status = Call.State.Closed;\n      this._signalingStatus = Call.State.Closed;\n    }\n  }\n\n  /**\n   * Post an event to Endpoint Analytics indicating that the end user\n   *   has ignored a request for feedback.\n   */\n  private _postFeedbackDeclined(): Promise<void> {\n    return this._publisher.info('feedback', 'received-none', null, this, true);\n  }\n\n  /**\n   * Publish the current set of queued metrics samples to Insights.\n   */\n  private _publishMetrics(): void {\n    if (this._metricsSamples.length === 0) {\n      return;\n    }\n\n    this._publisher.postMetrics(\n      'quality-metrics-samples', 'metrics-sample', this._metricsSamples.splice(0), this._createMetricPayload(), this,\n    ).catch((e: any) => {\n      this._log.warn('Unable to post metrics to Insights. Received error:', e);\n    });\n  }\n\n  /**\n   * Re-emit an StatsMonitor warning as a {@link Call}.warning or .warning-cleared event.\n   * @param warningData\n   * @param wasCleared - Whether this is a -cleared or -raised event.\n   */\n  private _reemitWarning = (warningData: Record<string, any>, wasCleared?: boolean): void => {\n    const groupPrefix = /^audio/.test(warningData.name) ?\n      'audio-level-' : 'network-quality-';\n\n    const warningPrefix = WARNING_PREFIXES[warningData.threshold.name];\n\n    /**\n     * NOTE: There are two \"packet-loss\" warnings: `high-packet-loss` and\n     * `high-packets-lost-fraction`, so in this case we need to use a different\n     * `WARNING_NAME` mapping.\n     */\n    let warningName: string | undefined;\n    if (warningData.name in MULTIPLE_THRESHOLD_WARNING_NAMES) {\n      warningName = MULTIPLE_THRESHOLD_WARNING_NAMES[warningData.name][warningData.threshold.name];\n    } else if (warningData.name in WARNING_NAMES) {\n      warningName = WARNING_NAMES[warningData.name];\n    }\n\n    const warning: string = warningPrefix + warningName;\n\n    this._emitWarning(groupPrefix, warning, warningData.threshold.value,\n                      warningData.values || warningData.value, wasCleared, warningData);\n  }\n\n  /**\n   * Re-emit an StatsMonitor warning-cleared as a .warning-cleared event.\n   * @param warningData\n   */\n  private _reemitWarningCleared = (warningData: Record<string, any>): void => {\n    this._reemitWarning(warningData, true);\n  }\n\n  /**\n   * Set the CallSid\n   * @param payload\n   */\n  private _setCallSid(payload: Record<string, string>): void {\n    const callSid = payload.callsid;\n    if (!callSid) { return; }\n\n    this.parameters.CallSid = callSid;\n    this._mediaHandler.callSid = callSid;\n  }\n}\n\nnamespace Call {\n  /**\n   * Emitted when the {@link Call} is accepted.\n   * @param call - The {@link Call}.\n   * @example `call.on('accept', call => { })`\n   * @event\n   */\n  declare function acceptEvent(call: Call): void;\n\n  /**\n   * Emitted when the {@link Call} is canceled.\n   * @example `call.on('cancel', () => { })`\n   * @event\n   */\n  declare function cancelEvent(): void;\n\n  /**\n   * Emitted when the {@link Call} is disconnected.\n   * @param call - The {@link Call}.\n   * @example `call.on('disconnect', call => { })`\n   * @event\n   */\n  declare function disconnectEvent(call: Call): void;\n\n  /**\n   * Emitted when the {@link Call} receives an error.\n   * @param error\n   * @example `call.on('error', error => { })`\n   * @event\n   */\n  declare function errorEvent(error: TwilioError): void;\n\n  /**\n   * Emitted when a Call receives a message from the backend.\n   * <br/><br/>This feature is currently in Beta.\n   * @param message - A message object representing the payload\n   * that was received from the Twilio backend.\n   * @event\n   */\n  declare function messageReceivedEvent(message: Call.Message): void;\n\n  /**\n   * Emitted after calling the {@link Call.sendMessage} API.\n   * This event indicates that Twilio has received the message.\n   * <br/><br/>This feature is currently in Beta.\n   * @param message - A message object that was sent to the Twilio backend.\n   * @event\n   */\n  declare function messageSentEvent(message: Call.Message): void;\n\n  /**\n   * Emitted when the {@link Call} is muted or unmuted.\n   * @param isMuted - Whether the {@link Call} is muted.\n   * @param call - The {@link Call}.\n   * @example `call.on('mute', (isMuted, call) => { })`\n   * @event\n   */\n  declare function muteEvent(isMuted: boolean, call: Call): void;\n\n  /**\n   * Emitted when the {@link Call} has regained media connectivity.\n   * @example `call.on('reconnected', () => { })`\n   * @event\n   */\n  declare function reconnectedEvent(): void;\n\n  /**\n   * Emitted when the {@link Call} has lost media connectivity and is reconnecting.\n   * @param error - The {@link TwilioError} that caused the media connectivity loss\n   * @example `call.on('reconnecting', error => { })`\n   * @event\n   */\n  declare function reconnectingEvent(error: TwilioError): void;\n\n  /**\n   * Emitted when the {@link Call} is rejected.\n   * @example `call.on('reject', () => { })`\n   * @event\n   */\n  declare function rejectEvent(): void;\n\n  /**\n   * Emitted every 50ms with the current input and output volumes, as a percentage of maximum\n   * volume, between -100dB and -30dB. Represented by a floating point number.\n   * @param inputVolume - A floating point number between 0.0 and 1.0 inclusive.\n   * @param outputVolume - A floating point number between 0.0 and 1.0 inclusive.\n   * @example `call.on('volume', (inputVolume, outputVolume) => { })`\n   * @event\n   */\n  declare function volumeEvent(inputVolume: number, outputVolume: number): void;\n\n  /**\n   * Emitted when the {@link Call} gets a webrtc sample object.\n   * This event is published every second.\n   * @param sample\n   * @example `call.on('sample', sample => { })`\n   * @event\n   */\n  declare function sampleEvent(sample: RTCSample): void;\n\n  /**\n   * Possible states of the {@link Call}.\n   */\n  export enum State {\n    Closed = 'closed',\n    Connecting = 'connecting',\n    Open = 'open',\n    Pending = 'pending',\n    Reconnecting = 'reconnecting',\n    Ringing = 'ringing',\n  }\n\n  /**\n   * Different issues that may have been experienced during a call, that can be\n   * reported to Twilio Insights via {@link Call}.postFeedback().\n   */\n  export enum FeedbackIssue {\n    AudioLatency = 'audio-latency',\n    ChoppyAudio = 'choppy-audio',\n    DroppedCall = 'dropped-call',\n    Echo = 'echo',\n    NoisyCall = 'noisy-call',\n    OneWayAudio = 'one-way-audio',\n  }\n\n  /**\n   * A rating of call quality experienced during a call, to be reported to Twilio Insights\n   * via {@link Call}.postFeedback().\n   */\n  export enum FeedbackScore {\n    One = 1,\n    Two,\n    Three,\n    Four,\n    Five,\n  }\n\n  /**\n   * The directionality of the {@link Call}, whether incoming or outgoing.\n   */\n  export enum CallDirection {\n    Incoming = 'INCOMING',\n    Outgoing = 'OUTGOING',\n  }\n\n  /**\n   * Valid audio codecs to use for the media connection.\n   */\n  export enum Codec {\n    Opus = 'opus',\n    PCMU = 'pcmu',\n  }\n\n  /**\n   * Possible ICE Gathering failures\n   */\n  export enum IceGatheringFailureReason {\n    None = 'none',\n    Timeout = 'timeout',\n  }\n\n  /**\n   * Possible media failures\n   */\n  export enum MediaFailure {\n    ConnectionDisconnected = 'ConnectionDisconnected',\n    ConnectionFailed = 'ConnectionFailed',\n    IceGatheringFailed = 'IceGatheringFailed',\n    LowBytes = 'LowBytes',\n  }\n\n  /**\n   * Known call message types.\n   */\n  export enum MessageType {\n    /**\n     * Allows for any object types to be defined by the user.\n     * When this value is used in the {@link Call.Message} object,\n     * The {@link Call.Message.content} can be of any type as long as\n     * it matches the MIME type defined in {@link Call.Message.contentType}.\n     */\n    UserDefinedMessage = 'user-defined-message',\n  }\n\n  /**\n   * Options to be used to acquire media tracks and connect media.\n   */\n  export interface AcceptOptions {\n    /**\n     * An RTCConfiguration to pass to the RTCPeerConnection constructor.\n     */\n    rtcConfiguration?: RTCConfiguration;\n\n    /**\n     * MediaStreamConstraints to pass to getUserMedia when making or accepting a Call.\n     */\n    rtcConstraints?: MediaStreamConstraints;\n  }\n\n  /**\n   * A CallerInfo provides caller verification information.\n   */\n  export interface CallerInfo {\n    /**\n     * Whether or not the caller's phone number has been verified by\n     * Twilio using SHAKEN/STIR validation. True if the caller has\n     * been validated at level 'A', false if the caller has been\n     * verified at any lower level or has failed validation.\n     */\n    isVerified: boolean;\n  }\n\n  /**\n   * Mandatory config options to be passed to the {@link Call} constructor.\n   * @private\n   */\n  export interface Config {\n    /**\n     * An AudioHelper instance to be used for input/output devices.\n     */\n    audioHelper: IAudioHelper;\n\n    /**\n     * A method to use for getUserMedia.\n     */\n    getUserMedia: (constraints: MediaStreamConstraints) => Promise<MediaStream>;\n\n    /**\n     * Whether or not the browser uses unified-plan SDP by default.\n     */\n    isUnifiedPlanDefault: boolean;\n\n    /**\n     * A function to be called after {@link Call.ignore} is called.\n     */\n    onIgnore: () => void;\n\n    /**\n     * The PStream instance to use for Twilio call signaling.\n     */\n    pstream: IPStream;\n\n    /**\n     * An EventPublisher instance to use for publishing events\n     */\n    publisher: IPublisher;\n\n    /**\n     * A Map of Sounds to play.\n     */\n    soundcache: Map<Device.SoundName, ISound>;\n  }\n\n  /**\n   * A Call Message represents the data that is being transferred between\n   * Twilio and the SDK.\n   */\n  export interface Message {\n    /**\n     * The content of the message which should match the contentType parameter.\n     */\n    content: any;\n\n    /**\n     * The MIME type of the content. The default value is application/json\n     * and is the only contentType that is supported at the moment.\n     */\n    contentType?: string;\n\n    /**\n     * The type of message\n     */\n    messageType: MessageType;\n\n    /**\n     * An autogenerated id that uniquely identifies the instance of this message.\n     * This is not required when sending a message from the SDK as this is autogenerated.\n     * But it will be available after the message is sent, or when a message is received.\n     */\n    voiceEventSid?: string;\n  }\n\n  /**\n   * Options to be passed to the {@link Call} constructor.\n   * @private\n   */\n  export interface Options {\n    /**\n     * A method to call before Call.accept is processed.\n     */\n    beforeAccept?: (call: Call) => void;\n\n    /**\n     * Custom format context parameters associated with this call.\n     */\n    callParameters?: Record<string, string>;\n\n    /**\n     * An ordered array of codec names, from most to least preferred.\n     */\n    codecPreferences?: Codec[];\n\n    /**\n     * A DialTone player, to play mock DTMF sounds.\n     */\n    dialtonePlayer?: DialtonePlayer;\n\n    /**\n     * Whether or not to enable DSCP.\n     */\n    dscp?: boolean;\n\n    /**\n     * Experimental feature.\n     * Force Chrome's ICE agent to use aggressive nomination when selecting a candidate pair.\n     */\n    forceAggressiveIceNomination?: boolean;\n\n    /**\n     * The gateway currently connected to.\n     */\n    gateway?: string;\n\n    /**\n     * A method that returns the current input MediaStream set on {@link Device}.\n     */\n    getInputStream?: () => MediaStream;\n\n    /**\n     * A method that returns the current SinkIDs set on {@link Device}.\n     */\n    getSinkIds?: () => string[];\n\n    /**\n     * The maximum average audio bitrate to use, in bits per second (bps) based on\n     * [RFC-7587 7.1](https://tools.ietf.org/html/rfc7587#section-7.1). By default, the setting\n     * is not used. If you specify 0, then the setting is not used. Any positive integer is allowed,\n     * but values outside the range 6000 to 510000 are ignored and treated as 0. The recommended\n     * bitrate for speech is between 8000 and 40000 bps as noted in\n     * [RFC-7587 3.1.1](https://tools.ietf.org/html/rfc7587#section-3.1.1).\n     */\n    maxAverageBitrate?: number;\n\n    /**\n     * Custom MediaHandler (PeerConnection) constructor.\n     */\n    MediaHandler?: IPeerConnection;\n\n    /**\n     * The offer SDP, if this is an incoming call.\n     */\n    offerSdp?: string | null;\n\n    /**\n     * Whether this is a preflight call or not\n     */\n    preflight?: boolean;\n\n    /**\n     * A reconnect token for the {@link Call}. Passed in for incoming {@link Calls}.\n     */\n    reconnectToken?: string;\n\n    /**\n     * An RTCConfiguration to pass to the RTCPeerConnection constructor.\n     */\n    rtcConfiguration?: RTCConfiguration;\n\n    /**\n     * RTC Constraints to pass to getUserMedia when making or accepting a Call.\n     * The format of this object depends on browser.\n     */\n    rtcConstraints?: MediaStreamConstraints;\n\n    /**\n     * Whether the disconnect sound should be played.\n     */\n    shouldPlayDisconnect?: () => boolean;\n\n    /**\n     * An override for the StatsMonitor dependency.\n     */\n    StatsMonitor?: new () => StatsMonitor;\n\n    /**\n     * TwiML params for the call. May be set for either outgoing or incoming calls.\n     */\n    twimlParams?: Record<string, any>;\n\n    /**\n     * Voice event SID generator.\n     */\n    voiceEventSidGenerator?: () => string;\n  }\n\n  /**\n   * Call metrics published to Insight Metrics.\n   * This include rtc samples and audio information.\n   * @private\n   */\n  export interface CallMetrics extends RTCSample {\n    /**\n     * Percentage of maximum volume, between 0.0 to 1.0, representing -100 to -30 dB.\n     */\n    inputVolume: number;\n\n    /**\n     * Percentage of maximum volume, between 0.0 to 1.0, representing -100 to -30 dB.\n     */\n    outputVolume: number;\n  }\n}\n\nfunction generateTempCallSid() {\n  return 'TJSxxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    /* tslint:disable:no-bitwise */\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    /* tslint:enable:no-bitwise */\n    return v.toString(16);\n  });\n}\n\nexport default Call;\n"]}