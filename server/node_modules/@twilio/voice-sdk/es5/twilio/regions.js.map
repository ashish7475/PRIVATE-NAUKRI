{"version":3,"file":"regions.js","sourceRoot":"","sources":["../../lib/twilio/regions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * This module describes valid and deprecated regions.\n */\nimport { InvalidArgumentError } from './errors';\n\n/**\n * Valid edges.\n * @private\n */\nexport enum Edge {\n  /**\n   * Public edges\n   */\n  Sydney = 'sydney',\n  SaoPaulo = 'sao-paulo',\n  Dublin = 'dublin',\n  Frankfurt = 'frankfurt',\n  Tokyo = 'tokyo',\n  Singapore = 'singapore',\n  Ashburn = 'ashburn',\n  Umatilla = 'umatilla',\n  Roaming = 'roaming',\n  /**\n   * Interconnect edges\n   */\n  AshburnIx = 'ashburn-ix',\n  SanJoseIx = 'san-jose-ix',\n  LondonIx = 'london-ix',\n  FrankfurtIx = 'frankfurt-ix',\n  SingaporeIx = 'singapore-ix',\n  SydneyIx = 'sydney-ix',\n  TokyoIx = 'tokyo-ix',\n}\n\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won't\n * be able to connect, and won't throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\nexport enum Region {\n  Au1 = 'au1',\n  Au1Ix = 'au1-ix',\n  Br1 = 'br1',\n  De1 = 'de1',\n  De1Ix = 'de1-ix',\n  Gll = 'gll',\n  Ie1 = 'ie1',\n  Ie1Ix = 'ie1-ix',\n  Ie1Tnx = 'ie1-tnx',\n  Jp1 = 'jp1',\n  Jp1Ix = 'jp1-ix',\n  Sg1 = 'sg1',\n  Sg1Ix = 'sg1-ix',\n  Sg1Tnx = 'sg1-tnx',\n  Us1 = 'us1',\n  Us1Ix = 'us1-ix',\n  Us1Tnx = 'us1-tnx',\n  Us2 = 'us2',\n  Us2Ix = 'us2-ix',\n  Us2Tnx = 'us2-tnx',\n}\n\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\nexport const regionShortcodes: { [index: string]: Region } = {\n  ASIAPAC_SINGAPORE: Region.Sg1,\n  ASIAPAC_SYDNEY: Region.Au1,\n  ASIAPAC_TOKYO: Region.Jp1,\n  EU_FRANKFURT: Region.De1,\n  EU_IRELAND: Region.Ie1,\n  SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n  US_EAST_VIRGINIA: Region.Us1,\n  US_WEST_OREGON: Region.Us2,\n};\n\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexport const regionToEdge: Record<Region, Edge> = {\n  [Region.Au1]: Edge.Sydney,\n  [Region.Br1]: Edge.SaoPaulo,\n  [Region.Ie1]: Edge.Dublin,\n  [Region.De1]: Edge.Frankfurt,\n  [Region.Jp1]: Edge.Tokyo,\n  [Region.Sg1]: Edge.Singapore,\n  [Region.Us1]: Edge.Ashburn,\n  [Region.Us2]: Edge.Umatilla,\n  [Region.Gll]: Edge.Roaming,\n  /**\n   * Interconnect edges\n   */\n  [Region.Us1Ix]: Edge.AshburnIx,\n  [Region.Us2Ix]: Edge.SanJoseIx,\n  [Region.Ie1Ix]: Edge.LondonIx,\n  [Region.De1Ix]: Edge.FrankfurtIx,\n  [Region.Sg1Ix]: Edge.SingaporeIx,\n  [Region.Au1Ix]: Edge.SydneyIx,\n  [Region.Jp1Ix]: Edge.TokyoIx,\n  /**\n   * Tnx regions\n   */\n  [Region.Us1Tnx]: Edge.AshburnIx,\n  [Region.Us2Tnx]: Edge.AshburnIx,\n  [Region.Ie1Tnx]: Edge.LondonIx,\n  [Region.Sg1Tnx]: Edge.SingaporeIx,\n};\n\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\nexport const defaultEdge: Edge = Edge.Roaming;\n\n/**\n * The default event gateway URI to publish to.\n * @constant\n * @private\n */\nconst defaultEventGatewayURI: string = 'eventgw.twilio.com';\n\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\nfunction createChunderEdgeURI(edge: string): string {\n  return `voice-js.${edge}.twilio.com`;\n}\n\n/**\n * String template for a region insights URI\n * @param region - The region.\n */\nexport function createEventGatewayURI(region: string): string {\n  return region\n    ? `eventgw.${region}.twilio.com`\n    : defaultEventGatewayURI;\n}\n\n/**\n * Create a signaling endpoint URL to connect a websocket to from a chunder URI.\n * @param uri the chunder URI to create a signaling endpoint URL for\n */\nexport function createSignalingEndpointURL(uri: string): string {\n  return `wss://${uri}/signal`;\n}\n\n/**\n * Get the URI associated with the passed edge.\n * @private\n * @param edge - A string or an array of edge values\n * @returns An array of chunder URIs\n */\nexport function getChunderURIs(edge?: string[] | string): string[] {\n  if (!!edge && typeof edge !== 'string' && !Array.isArray(edge)) {\n    throw new InvalidArgumentError(\n      'If `edge` is provided, it must be of type `string` or an array of strings.',\n    );\n  }\n\n  let uris: string[];\n\n  if (edge) {\n    const edgeParams = Array.isArray(edge) ? edge : [edge];\n    uris = edgeParams.map((param: Edge) => createChunderEdgeURI(param));\n  } else {\n    uris = [createChunderEdgeURI(defaultEdge)];\n  }\n\n  return uris;\n}\n\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region's full AWS string.\n */\nexport function getRegionShortcode(region: string): Region | null {\n  return regionShortcodes[region] || null;\n}\n"]}