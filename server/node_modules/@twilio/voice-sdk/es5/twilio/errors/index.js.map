{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/twilio/errors/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;;;GAGG;AACH,yCAAyC;AACzC,yCASqB;AAwCnB,8BAhDA,+BAAmB,CAgDA;AACnB,uBAhDA,wBAAY,CAgDA;AACZ,wBA/CA,yBAAa,CA+CA;AACb,sBA/CA,uBAAW,CA+CA;AACX,0BA/CA,2BAAe,CA+CA;AACf,sBA/CA,uBAAW,CA+CA;AACX,0BA/CA,2BAAe,CA+CA;AA5CjB,2DAA2D;AAC3D;IAA0C,wCAAK;IAC7C,8BAAY,OAAgB;QAA5B,YACE,kBAAM,OAAO,CAAC,SAEf;QADC,KAAI,CAAC,IAAI,GAAG,sBAAsB,CAAC;;IACrC,CAAC;IACH,2BAAC;AAAD,CAAC,AALD,CAA0C,KAAK,GAK9C;AALY,oDAAoB;AAMjC;IAAuC,qCAAK;IAC1C,2BAAY,OAAgB;QAA5B,YACE,kBAAM,OAAO,CAAC,SAEf;QADC,KAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC;;IAClC,CAAC;IACH,wBAAC;AAAD,CAAC,AALD,CAAuC,KAAK,GAK3C;AALY,8CAAiB;AAM9B;IAAuC,qCAAK;IAC1C,2BAAY,OAAgB;QAA5B,YACE,kBAAM,OAAO,CAAC,SAEf;QADC,KAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC;;IAClC,CAAC;IACH,wBAAC;AAAD,CAAC,AALD,CAAuC,KAAK,GAK3C;AALY,8CAAiB;AAO9B,uEAAuE;AACvE,sCAAsC;AACtC,SAAgB,cAAc,CAAC,IAAY;IACzC,IAAM,KAAK,GAAqC,wBAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACvE,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,oBAAoB,CAAC,gBAAc,IAAI,eAAY,CAAC,CAAC;KAChE;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAND,wCAMC;AAED,uEAAuE;AACvE,sCAAsC;AACtC,SAAgB,cAAc,CAAC,IAAY;IACzC,OAAO,wBAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC;AAFD,wCAEC","sourcesContent":["/**\n * @packageDocumentation\n * @internalapi\n */\n/* tslint:disable max-classes-per-file */\nimport {\n  AuthorizationErrors,\n  ClientErrors,\n  errorsByCode,\n  GeneralErrors,\n  MediaErrors,\n  SignalingErrors,\n  TwilioError,\n  UserMediaErrors,\n} from './generated';\n\n// Application errors that can be avoided by good app logic\nexport class InvalidArgumentError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'InvalidArgumentError';\n  }\n}\nexport class InvalidStateError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'InvalidStateError';\n  }\n}\nexport class NotSupportedError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'NotSupportedError';\n  }\n}\n\n// This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\nexport function getErrorByCode(code: number): (typeof TwilioError) {\n  const error: (typeof TwilioError) | undefined = errorsByCode.get(code);\n  if (!error) {\n    throw new InvalidArgumentError(`Error code ${code} not found`);\n  }\n  return error;\n}\n\n// This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\nexport function hasErrorByCode(code: number): boolean {\n  return errorsByCode.has(code);\n}\n\n// All errors we want to throw or emit locally in the SDK need to be passed through here.\nexport {\n  AuthorizationErrors,\n  ClientErrors,\n  GeneralErrors,\n  MediaErrors,\n  SignalingErrors,\n  TwilioError,\n  UserMediaErrors,\n};\n"]}