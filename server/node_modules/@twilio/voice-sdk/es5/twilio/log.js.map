{"version":3,"file":"log.js","sourceRoot":"","sources":["../../lib/twilio/log.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;AAEH,yCAA2C;AAC3C,yCAA2C;AAa3C;;;GAGG;AACH;IA2BE;;;OAGG;IACH,aAAY,OAAoB;QAC9B,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,wBAAY,CAAC,CAAC;IACpH,CAAC;IA3BD;;;OAGG;IACI,eAAW,GAAlB;QACE,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;YACjB,GAAG,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;SAC1B;QACD,OAAO,GAAG,CAAC,QAAQ,CAAC;IACtB,CAAC;IAoBD;;;OAGG;IACH,mBAAK,GAAL;;QAAM,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAClB,CAAA,KAAA,IAAI,CAAC,IAAI,CAAA,CAAC,KAAK,WAAI,IAAI,EAAE;IAC3B,CAAC;IAED;;;OAGG;IACH,mBAAK,GAAL;;QAAM,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAClB,CAAA,KAAA,IAAI,CAAC,IAAI,CAAA,CAAC,KAAK,WAAI,IAAI,EAAE;IAC3B,CAAC;IAED;;;OAGG;IACH,iCAAmB,GAAnB;QACE,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED;;;OAGG;IACH,kBAAI,GAAJ;;QAAK,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACjB,CAAA,KAAA,IAAI,CAAC,IAAI,CAAA,CAAC,IAAI,WAAI,IAAI,EAAE;IAC1B,CAAC;IAED;;OAEG;IACH,6BAAe,GAAf,UAAgB,KAAkC;QAChD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED;;;OAGG;IACH,kBAAI,GAAJ;;QAAK,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACjB,CAAA,KAAA,IAAI,CAAC,IAAI,CAAA,CAAC,IAAI,WAAI,IAAI,EAAE;IAC1B,CAAC;IA/ED;;OAEG;IACI,UAAM,GAA4B,cAAc,CAAC,MAAM,CAAC;IA6EjE,UAAC;CAAA,AAjFD,IAiFC;AAEY,QAAA,MAAM,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC,mBAAmB,EAAE,CAAC;AAE9D,kBAAe,GAAG,CAAC","sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\nimport * as LogLevelModule from 'loglevel';\nimport { PACKAGE_NAME } from './constants';\n\n/**\n * Options that may be passed to the {@link Log} constructor for internal testing.\n * @private\n */\nexport interface LogOptions {\n  /**\n   * Custom loglevel module\n   */\n  LogLevelModule: any;\n}\n\n/**\n * {@link Log} provides logging features throught the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n */\nclass Log {\n  /**\n   * Log levels\n   */\n  static levels: LogLevelModule.LogLevel = LogLevelModule.levels;\n\n  /**\n   * Create the logger singleton instance if it doesn't exists\n   * @returns The singleton {@link Log} instance\n   */\n  static getInstance(): Log {\n    if (!Log.instance) {\n      Log.instance = new Log();\n    }\n    return Log.instance;\n  }\n\n  /**\n   * The logger singleton instance\n   */\n  private static instance: Log;\n\n  /**\n   * The loglevel logger instance that will be used in this {@link Log}\n   */\n  private _log: LogLevelModule.Logger;\n\n  /**\n   * @constructor\n   * @param [options] - Optional settings\n   */\n  constructor(options?: LogOptions) {\n    this._log = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(PACKAGE_NAME);\n  }\n\n  /**\n   * Log a debug message\n   * @param args - Any number of arguments to be passed to loglevel.debug\n   */\n  debug(...args: any[]): void {\n    this._log.debug(...args);\n  }\n\n  /**\n   * Log an error message\n   * @param args - Any number of arguments to be passed to loglevel.error\n   */\n  error(...args: any[]): void {\n    this._log.error(...args);\n  }\n\n  /**\n   * Return the `loglevel` instance maintained internally.\n   * @returns The `loglevel` instance.\n   */\n  getLogLevelInstance(): LogLevelModule.Logger {\n    return this._log;\n  }\n\n  /**\n   * Log an info message\n   * @param args - Any number of arguments to be passed to loglevel.info\n   */\n  info(...args: any[]): void {\n    this._log.info(...args);\n  }\n\n  /**\n   * Set a default log level to disable all logging below the given level\n   */\n  setDefaultLevel(level: LogLevelModule.LogLevelDesc): void {\n    this._log.setDefaultLevel(level);\n  }\n\n  /**\n   * Log a warning message\n   * @param args - Any number of arguments to be passed to loglevel.warn\n   */\n  warn(...args: any[]): void {\n    this._log.warn(...args);\n  }\n}\n\nexport const Logger = Log.getInstance().getLogLevelInstance();\n\nexport default Log;\n"]}