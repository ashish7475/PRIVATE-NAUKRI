#!/usr/bin/env node
'use strict';

const exec = require('../lib/exec');
const fs = require('fs');

const filenames = fs.readdirSync('./errors').filter(name => /\.json$/.test(name));
const files = [];

async function run() {
  // Clean up old files
  await exec(`rm -rf ./dictionary.md ./table.md ./dist`);
  await exec(`mkdir ./dist`);

  // Get all file contents
  for (const filename of filenames) {
    files.push({
      error: JSON.parse(fs.readFileSync(`./errors/${filename}`, 'utf8')),
      filename
    });
  }

  // Sort contents by code
  const sortedFiles = files.sort((a, b) => b.error.code < a.error.code);
  const sortedErrors = sortedFiles.map(a => a.error);
  const sortedFilenames = sortedFiles.map(a => a.filename);

  // Write concatenated error files
  fs.writeFileSync(__dirname + '/../dist/errors.json', JSON.stringify(sortedErrors, null, 2), 'utf8');
  fs.writeFileSync(__dirname + '/../dist/errors.js', `module.exports = ${JSON.stringify(sortedErrors, null, 2)};`, 'utf8');

  // Write markdown files
  for (const filename of sortedFilenames) {
    const fullPath = `../errors/${filename}`;
    await exec(`node ./bin/create-dictionary ${fullPath} >> ./dictionary.md`);
    await exec(`node ./bin/create-table ${fullPath} >> ./table.md`);
  }
}

run();
