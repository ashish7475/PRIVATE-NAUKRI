#!/usr/bin/env node
'use strict';

const createErrorSpecAnchor = require('../lib').createErrorSpecAnchor;
const createErrorSubclassSpecAnchor = require('../lib').createErrorSubclassSpecAnchor;
const createToC = require('../lib').createToC;
const readErrorClassSpec = require('../lib').readErrorClassSpec;
const two = require('../lib').two;

const filepaths = process.argv.slice(2);

/**
 * Create a table view of an {@link ErrorClassSpec}
 * @param {ErrorClassSpec} errorClassSpec
 * @returns {string} markdown
 */
function createTable(errorClassSpec) {
  return `# ${errorClassSpec.code}XXX: ${errorClassSpec.class} Errors

The following table defines all ${errorClassSpec.class} errors.
[See here](dictionary.md) for a dictionary view.
` + createToC(errorClassSpec.code, errorClassSpec.subclasses) + `

***

| Code | Description | Explanation | Causes | Solutions |
| ---- | ----------- | ----------- | ------ | --------- |
` + createTableSections(errorClassSpec.code, errorClassSpec.subclasses);
}

/**
 * Create a table header for an {@link ErrorSubclassSpec}.
 * @param {number} code - a two-digit prefix
 * @param {ErrorSubclassSpec} errorSubclassSpec
 * @returns {string} markdown
 */
function createTableHeader(code, errorSubclassSpec) {
  return `| __${code}${errorSubclassSpec.code}XX__ <a name="${createErrorSubclassSpecAnchor(code, errorSubclassSpec)}"> | __${errorSubclassSpec.class} Errors__ | | | |`;
}

/**
 * Create a table row for an {@link ErrorSpec}.
 * @param {number} code - a three-digit prefix
 * @param {ErrorSpec} errorSpec
 * @returns {string} markdown
 */
function createTableRow(code, errorSpec) {
  const causes = errorSpec.causes.length
    ? errorSpec.causes.map(cause => '• ' + cause)
    : [''];

  const solutions = errorSpec.solutions.length
    ? errorSpec.solutions.map(solution => '• ' + solution)
    : [''];

  const n = Math.max(causes.length, solutions.length);

  var markdown = `| ${code}${two(errorSpec.code)} <a name="${createErrorSpecAnchor(code, errorSpec)}"> | ${errorSpec.description} | ${errorSpec.explanation} | ${causes[0]} | ${solutions[0]} |\n`;

  for (var i = 1; i < n; i++) {
    markdown += `| | | | ${causes[i] ? causes[i] : ''} | ${solutions[i] ? solutions[i] : ''} |\n`;
  }

  return markdown;
}

/**
 * Create table rows for {@link ErrorSpec}s.
 * @param {number} code - a three-digit prefix
 * @param {Array<ErrorSpec>} errorSpecs
 * @returns {string} markdown
 */
function createTableRows(code, errorSpecs) {
  return errorSpecs.map(errorSpec => createTableRow(code, errorSpec)).join('');
}

/**
 * Create table rows for {@link ErrorSubclassSpec}s.
 * @param {number} code - a two-digit prefix
 * @param {Array<ErrorSubclassSpec>} errorSubclassSpecs
 * @returns {string} markdown
 */
function createTableSections(code, errorSubclassSpecs) {
  return errorSubclassSpecs.map(errorSubclassSpec => {
    return createTableHeader(code, errorSubclassSpec) + '\n' +
      createTableRows(code * 10 + errorSubclassSpec.code, errorSubclassSpec.errors);
  }).join('');
}

filepaths.forEach(filepath => {
  const errorClassSpec = readErrorClassSpec(filepath);
  const markdown = createTable(errorClassSpec);
  console.log(markdown);
});
