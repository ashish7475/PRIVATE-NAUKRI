"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const auth_1 = require("@vonage/auth");
const vetch_1 = require("@vonage/vetch");
const AuthenticationType_1 = require("./enums/AuthenticationType");
const transfomers = __importStar(require("./transformers"));
const debug_1 = __importDefault(require("debug"));
const log = (0, debug_1.default)('vonage:server-client');
class Client {
    authType;
    auth;
    config;
    constructor(credentials, options) {
        if (typeof credentials.getQueryParams === 'undefined') {
            credentials = new auth_1.Auth(credentials);
        }
        this.auth = credentials;
        this.config = {
            restHost: null,
            apiHost: null,
            videoHost: null,
            responseType: null,
            timeout: null,
        };
        this.config.restHost = options?.restHost || 'https://rest.nexmo.com';
        this.config.apiHost = options?.apiHost || 'https://api.nexmo.com';
        this.config.videoHost
            = options?.videoHost || 'https://video.api.vonage.com';
        this.config.responseType = options?.responseType || vetch_1.ResponseTypes.json;
    }
    static transformers = transfomers;
    async addAuthenticationToRequest(request) {
        log(`adding ${this.authType || 'api key/secret'} to request`);
        switch (this.authType) {
            case AuthenticationType_1.AuthenticationType.BASIC:
                request.headers = Object.assign({}, request.headers, {
                    Authorization: await this.auth.createBasicHeader(),
                });
                break;
            case AuthenticationType_1.AuthenticationType.JWT:
                request.headers = Object.assign({}, request.headers, {
                    Authorization: await this.auth.createBearerHeader(),
                });
                break;
            case AuthenticationType_1.AuthenticationType.QUERY_KEY_SECRET:
                request.params = request.params || {};
                request.params = Object.assign({}, request.params, await this.auth.getQueryParams(request.params));
                break;
            case AuthenticationType_1.AuthenticationType.KEY_SECRET:
            default:
                if (request.method === 'GET') {
                    request.params = request.params || {};
                    request.params = Object.assign({}, request.params, await this.auth.getQueryParams(request.params));
                }
                else {
                    request.data = request.data || {};
                    request.data = Object.assign({}, request.data, await this.auth.getQueryParams(request.data));
                }
                break;
        }
        return request;
    }
    async sendDeleteRequest(url) {
        const request = {
            url,
            method: 'DELETE',
        };
        return await this.sendRequest(request);
    }
    async sendFormSubmitRequest(url, payload) {
        const request = {
            url,
            body: new URLSearchParams(payload),
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        };
        if (!payload) {
            delete request.body;
        }
        return await this.sendRequest(request);
    }
    async sendGetRequest(url, queryParams) {
        const request = {
            url,
            params: queryParams,
            method: 'GET',
        };
        if (!queryParams) {
            delete request.params;
        }
        return await this.sendRequest(request);
    }
    async sendPatchRequest(url, payload) {
        const request = {
            url,
            data: payload,
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
        };
        if (!payload) {
            delete request.data;
        }
        return await this.sendRequest(request);
    }
    async sendPostRequest(url, payload) {
        const request = {
            url,
            data: payload,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        };
        if (!payload) {
            delete request.data;
        }
        return await this.sendRequest(request);
    }
    async sendPutRequest(url, payload) {
        const request = {
            url,
            data: payload,
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
        };
        if (!payload) {
            delete request.data;
        }
        return await this.sendRequest(request);
    }
    async sendRequest(request) {
        request = await this.addAuthenticationToRequest(request);
        request.timeout = this.config.timeout;
        const result = await (0, vetch_1.request)(request);
        return result;
    }
}
exports.Client = Client;
//# sourceMappingURL=client.js.map